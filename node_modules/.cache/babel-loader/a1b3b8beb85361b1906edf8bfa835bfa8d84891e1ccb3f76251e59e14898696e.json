{"ast":null,"code":"import _defineProperty from \"C:/Users/Asus/Desktop/population-density-map/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @module ol/render/canvas/ZIndexContext\n */\n\nimport { getSharedCanvasContext2D } from '../../dom.js';\n\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\nclass ZIndexContext {\n  constructor() {\n    var _this = this;\n    /**\n     * @private\n     * @param {...*} args Args.\n     * @return {ZIndexContext} This.\n     */\n    _defineProperty(this, \"pushMethodArgs_\", function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this.instructions_[_this.zIndex + _this.offset_].push(args);\n      return _this;\n    });\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offset_ = 0;\n\n    /**\n     * @type {ZIndexContextProxy}\n     */\n    this.context_ = /** @type {ZIndexContextProxy} */\n    new Proxy(getSharedCanvasContext2D(), {\n      get: (target, property) => {\n        if (typeof ( /** @type {*} */getSharedCanvasContext2D()[property]) !== 'function') {\n          // we only accept calling functions on the proxy, not accessing properties\n          return undefined;\n        }\n        if (!this.instructions_[this.zIndex + this.offset_]) {\n          this.instructions_[this.zIndex + this.offset_] = [];\n        }\n        this.instructions_[this.zIndex + this.offset_].push(property);\n        return this.pushMethodArgs_;\n      },\n      set: (target, property, value) => {\n        if (!this.instructions_[this.zIndex + this.offset_]) {\n          this.instructions_[this.zIndex + this.offset_] = [];\n        }\n        this.instructions_[this.zIndex + this.offset_].push(property, value);\n        return true;\n      }\n    });\n  }\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  draw(context) {\n    this.instructions_.forEach(instructionsAtIndex => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n        const instructionAtIndex = instructionsAtIndex[++i];\n        if (typeof ( /** @type {*} */context[property]) === 'function') {\n          /** @type {*} */context[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */context[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */\n          context[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n}\nexport default ZIndexContext;","map":{"version":3,"names":["getSharedCanvasContext2D","ZIndexContext","constructor","_this","_defineProperty","_len","arguments","length","args","Array","_key","instructions_","zIndex","offset_","push","context_","Proxy","get","target","property","undefined","pushMethodArgs_","set","value","pushFunction","render","getContext","draw","context","forEach","instructionsAtIndex","i","ii","instructionAtIndex","clear","offset"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/render/canvas/ZIndexContext.js"],"sourcesContent":["/**\n * @module ol/render/canvas/ZIndexContext\n */\n\nimport {getSharedCanvasContext2D} from '../../dom.js';\n\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\nclass ZIndexContext {\n  constructor() {\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offset_ = 0;\n\n    /**\n     * @type {ZIndexContextProxy}\n     */\n    this.context_ = /** @type {ZIndexContextProxy} */ (\n      new Proxy(getSharedCanvasContext2D(), {\n        get: (target, property) => {\n          if (\n            typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==\n            'function'\n          ) {\n            // we only accept calling functions on the proxy, not accessing properties\n            return undefined;\n          }\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property);\n          return this.pushMethodArgs_;\n        },\n        set: (target, property, value) => {\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property, value);\n          return true;\n        },\n      })\n    );\n  }\n\n  /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */\n  pushMethodArgs_ = (...args) => {\n    this.instructions_[this.zIndex + this.offset_].push(args);\n    return this;\n  };\n\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  draw(context) {\n    this.instructions_.forEach((instructionsAtIndex) => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n        const instructionAtIndex = instructionsAtIndex[++i];\n        if (typeof (/** @type {*} */ (context)[property]) === 'function') {\n          /** @type {*} */ (context)[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */ (context)[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */ (context)[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n}\n\nexport default ZIndexContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}