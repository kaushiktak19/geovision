{"ast":null,"code":"/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, { transformGeometryWithOptions } from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport { get } from '../proj.js';\nimport { inflateEnds } from '../geom/flat/orient.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureClass} FeatureClassToFeature\n * @typedef {Object} Options\n * @property {FeatureClassToFeature} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @template {import('../Feature.js').FeatureClass} [T=typeof import(\"../render/Feature.js\").default]\n * @extends {FeatureFormat<T>}\n * @api\n */\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options<T>} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels'\n    });\n    this.featureClass = options.featureClass ? options.featureClass : ( /** @type {T} */RenderFeature);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.idProperty_ = options.idProperty;\n    this.supportedMediaTypes = ['application/vnd.mapbox-vector-tile', 'application/x-protobuf'];\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n      length--;\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);\n          coordsLen += 2;\n        }\n      } else {\n        throw new Error('Invalid command found in the PBF');\n      }\n    }\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n   */\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n    if (type === 0) {\n      return null;\n    }\n    let feature;\n    const values = rawFeature.properties;\n    let id;\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n    values[this.layerName_] = rawFeature.layer.name;\n    const flatCoordinates = /** @type {Array<number>} */[];\n    const ends = /** @type {Array<number>} */[];\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n    const geometryType = getGeometryType(type, ends.length);\n    if (this.featureClass === RenderFeature) {\n      feature = new ( /** @type {typeof RenderFeature} */this.featureClass)(geometryType, flatCoordinates, ends, 2, values, id);\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom = endss.length > 1 ? new MultiPolygon(flatCoordinates, 'XY', endss) : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom = geometryType === 'Point' ? new Point(flatCoordinates, 'XY') : geometryType === 'LineString' ? new LineString(flatCoordinates, 'XY') : geometryType === 'MultiPoint' ? new MultiPoint(flatCoordinates, 'XY') : geometryType === 'MultiLineString' ? new MultiLineString(flatCoordinates, 'XY', ends) : null;\n      }\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */\n      this.featureClass;\n      feature = new ctor();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n      feature.setProperties(values, true);\n    }\n    return feature;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'arraybuffer';\n  }\n\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import('./Feature.js').FeatureClassToFeature<T>>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n    const pbf = new PBF( /** @type {ArrayBuffer} */source);\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n      const pbfLayer = pbfLayers[name];\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n    return /** @type {Array<import('./Feature.js').FeatureClassToFeature<T>>} */(\n      features\n    );\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n}\n\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: []\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {}\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../render/Feature.js\").Type} */\n  let geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\nexport default MVT;","map":{"version":3,"names":["FeatureFormat","transformGeometryWithOptions","LineString","MultiLineString","MultiPoint","MultiPolygon","PBF","Point","Polygon","Projection","RenderFeature","get","inflateEnds","MVT","constructor","options","dataProjection","code","units","featureClass","geometryName_","geometryName","layerName_","layerName","layers_","layers","idProperty_","idProperty","supportedMediaTypes","readRawGeometry_","pbf","feature","flatCoordinates","ends","pos","geometry","end","readVarint","cmd","length","x","y","coordsLen","currentEnd","cmdLen","readSVarint","push","Error","createFeature_","rawFeature","type","values","properties","id","layer","name","geometryType","getGeometryType","transform","geom","endss","ctor","setGeometryName","setGeometry","undefined","setId","setProperties","getType","readFeatures","source","adaptOptions","setWorldExtent","extent","pbfLayers","readFields","layersPBFReader","features","includes","pbfLayer","setExtent","i","ii","readRawFeature","readProjection","setLayers","tag","keys","layerPBFReader","version","readString","value","readFloat","readDouble","readVarint64","readBoolean","featurePBFReader","key","numEnds"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/format/MVT.js"],"sourcesContent":["/**\n * @module ol/format/MVT\n */\n//FIXME Implement projection handling\n\nimport FeatureFormat, {transformGeometryWithOptions} from './Feature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport PBF from 'pbf';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport Projection from '../proj/Projection.js';\nimport RenderFeature from '../render/Feature.js';\nimport {get} from '../proj.js';\nimport {inflateEnds} from '../geom/flat/orient.js';\n\n/**\n * @template {import(\"../Feature.js\").FeatureClass} FeatureClassToFeature\n * @typedef {Object} Options\n * @property {FeatureClassToFeature} [featureClass] Class for features returned by\n * {@link module:ol/format/MVT~MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry\n * support at the cost of decreased rendering performance. The default is\n * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.\n * @property {string} [geometryName='geometry'] Geometry name to use when creating features.\n * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.\n * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all\n * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.\n * layers.\n */\n\n/**\n * @classdesc\n * Feature format for reading data in the Mapbox MVT format.\n *\n * @template {import('../Feature.js').FeatureClass} [T=typeof import(\"../render/Feature.js\").default]\n * @extends {FeatureFormat<T>}\n * @api\n */\nclass MVT extends FeatureFormat {\n  /**\n   * @param {Options<T>} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {Projection}\n     */\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels',\n    });\n\n    this.featureClass = options.featureClass\n      ? options.featureClass\n      : /** @type {T} */ (RenderFeature);\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layerName_ = options.layerName ? options.layerName : 'layer';\n\n    /**\n     * @private\n     * @type {Array<string>|null}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.idProperty_ = options.idProperty;\n\n    this.supportedMediaTypes = [\n      'application/vnd.mapbox-vector-tile',\n      'application/x-protobuf',\n    ];\n  }\n\n  /**\n   * Read the raw geometry from the pbf offset stored in a raw feature's geometry\n   * property.\n   * @param {PBF} pbf PBF.\n   * @param {Object} feature Raw feature.\n   * @param {Array<number>} flatCoordinates Array to store flat coordinates in.\n   * @param {Array<number>} ends Array to store ends in.\n   * @private\n   */\n  readRawGeometry_(pbf, feature, flatCoordinates, ends) {\n    pbf.pos = feature.geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let coordsLen = 0;\n    let currentEnd = 0;\n\n    while (pbf.pos < end) {\n      if (!length) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (coordsLen > currentEnd) {\n            ends.push(coordsLen);\n            currentEnd = coordsLen;\n          }\n        }\n\n        flatCoordinates.push(x, y);\n        coordsLen += 2;\n      } else if (cmd === 7) {\n        if (coordsLen > currentEnd) {\n          // close polygon\n          flatCoordinates.push(\n            flatCoordinates[currentEnd],\n            flatCoordinates[currentEnd + 1],\n          );\n          coordsLen += 2;\n        }\n      } else {\n        throw new Error('Invalid command found in the PBF');\n      }\n    }\n\n    if (coordsLen > currentEnd) {\n      ends.push(coordsLen);\n      currentEnd = coordsLen;\n    }\n  }\n\n  /**\n   * @private\n   * @param {PBF} pbf PBF\n   * @param {Object} rawFeature Raw Mapbox feature.\n   * @param {import(\"./Feature.js\").ReadOptions} options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike|null} Feature.\n   */\n  createFeature_(pbf, rawFeature, options) {\n    const type = rawFeature.type;\n    if (type === 0) {\n      return null;\n    }\n\n    let feature;\n    const values = rawFeature.properties;\n\n    let id;\n    if (!this.idProperty_) {\n      id = rawFeature.id;\n    } else {\n      id = values[this.idProperty_];\n      delete values[this.idProperty_];\n    }\n\n    values[this.layerName_] = rawFeature.layer.name;\n\n    const flatCoordinates = /** @type {Array<number>} */ ([]);\n    const ends = /** @type {Array<number>} */ ([]);\n    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);\n\n    const geometryType = getGeometryType(type, ends.length);\n\n    if (this.featureClass === RenderFeature) {\n      feature = new /** @type {typeof RenderFeature} */ (this.featureClass)(\n        geometryType,\n        flatCoordinates,\n        ends,\n        2,\n        values,\n        id,\n      );\n      feature.transform(options.dataProjection);\n    } else {\n      let geom;\n      if (geometryType == 'Polygon') {\n        const endss = inflateEnds(flatCoordinates, ends);\n        geom =\n          endss.length > 1\n            ? new MultiPolygon(flatCoordinates, 'XY', endss)\n            : new Polygon(flatCoordinates, 'XY', ends);\n      } else {\n        geom =\n          geometryType === 'Point'\n            ? new Point(flatCoordinates, 'XY')\n            : geometryType === 'LineString'\n              ? new LineString(flatCoordinates, 'XY')\n              : geometryType === 'MultiPoint'\n                ? new MultiPoint(flatCoordinates, 'XY')\n                : geometryType === 'MultiLineString'\n                  ? new MultiLineString(flatCoordinates, 'XY', ends)\n                  : null;\n      }\n      const ctor = /** @type {typeof import(\"../Feature.js\").default} */ (\n        this.featureClass\n      );\n      feature = new ctor();\n      if (this.geometryName_) {\n        feature.setGeometryName(this.geometryName_);\n      }\n      const geometry = transformGeometryWithOptions(geom, false, options);\n      feature.setGeometry(geometry);\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n      feature.setProperties(values, true);\n    }\n\n    return feature;\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'arraybuffer';\n  }\n\n  /**\n   * Read all features.\n   *\n   * @param {ArrayBuffer} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import('./Feature.js').FeatureClassToFeature<T>>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    const layers = this.layers_;\n    options = this.adaptOptions(options);\n    const dataProjection = get(options.dataProjection);\n    dataProjection.setWorldExtent(options.extent);\n    options.dataProjection = dataProjection;\n\n    const pbf = new PBF(/** @type {ArrayBuffer} */ (source));\n    const pbfLayers = pbf.readFields(layersPBFReader, {});\n    const features = [];\n    for (const name in pbfLayers) {\n      if (layers && !layers.includes(name)) {\n        continue;\n      }\n      const pbfLayer = pbfLayers[name];\n\n      const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;\n      dataProjection.setExtent(extent);\n\n      for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {\n        const rawFeature = readRawFeature(pbf, pbfLayer, i);\n        const feature = this.createFeature_(pbf, rawFeature, options);\n        if (feature !== null) {\n          features.push(feature);\n        }\n      }\n    }\n\n    return /** @type {Array<import('./Feature.js').FeatureClassToFeature<T>>} */ (\n      features\n    );\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.dataProjection;\n  }\n\n  /**\n   * Sets the layers that features will be read from.\n   * @param {Array<string>} layers Layers.\n   * @api\n   */\n  setLayers(layers) {\n    this.layers_ = layers;\n  }\n}\n\n/**\n * Reader callback for parsing layers.\n * @param {number} tag The tag.\n * @param {Object} layers The layers object.\n * @param {PBF} pbf The PBF.\n */\nfunction layersPBFReader(tag, layers, pbf) {\n  if (tag === 3) {\n    const layer = {\n      keys: [],\n      values: [],\n      features: [],\n    };\n    const end = pbf.readVarint() + pbf.pos;\n    pbf.readFields(layerPBFReader, layer, end);\n    layer.length = layer.features.length;\n    if (layer.length) {\n      layers[layer.name] = layer;\n    }\n  }\n}\n\n/**\n * Reader callback for parsing layer.\n * @param {number} tag The tag.\n * @param {Object} layer The layer object.\n * @param {PBF} pbf The PBF.\n */\nfunction layerPBFReader(tag, layer, pbf) {\n  if (tag === 15) {\n    layer.version = pbf.readVarint();\n  } else if (tag === 1) {\n    layer.name = pbf.readString();\n  } else if (tag === 5) {\n    layer.extent = pbf.readVarint();\n  } else if (tag === 2) {\n    layer.features.push(pbf.pos);\n  } else if (tag === 3) {\n    layer.keys.push(pbf.readString());\n  } else if (tag === 4) {\n    let value = null;\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      tag = pbf.readVarint() >> 3;\n      value =\n        tag === 1\n          ? pbf.readString()\n          : tag === 2\n            ? pbf.readFloat()\n            : tag === 3\n              ? pbf.readDouble()\n              : tag === 4\n                ? pbf.readVarint64()\n                : tag === 5\n                  ? pbf.readVarint()\n                  : tag === 6\n                    ? pbf.readSVarint()\n                    : tag === 7\n                      ? pbf.readBoolean()\n                      : null;\n    }\n    layer.values.push(value);\n  }\n}\n\n/**\n * Reader callback for parsing feature.\n * @param {number} tag The tag.\n * @param {Object} feature The feature object.\n * @param {PBF} pbf The PBF.\n */\nfunction featurePBFReader(tag, feature, pbf) {\n  if (tag == 1) {\n    feature.id = pbf.readVarint();\n  } else if (tag == 2) {\n    const end = pbf.readVarint() + pbf.pos;\n    while (pbf.pos < end) {\n      const key = feature.layer.keys[pbf.readVarint()];\n      const value = feature.layer.values[pbf.readVarint()];\n      feature.properties[key] = value;\n    }\n  } else if (tag == 3) {\n    feature.type = pbf.readVarint();\n  } else if (tag == 4) {\n    feature.geometry = pbf.pos;\n  }\n}\n\n/**\n * Read a raw feature from the pbf offset stored at index `i` in the raw layer.\n * @param {PBF} pbf PBF.\n * @param {Object} layer Raw layer.\n * @param {number} i Index of the feature in the raw layer's `features` array.\n * @return {Object} Raw feature.\n */\nfunction readRawFeature(pbf, layer, i) {\n  pbf.pos = layer.features[i];\n  const end = pbf.readVarint() + pbf.pos;\n\n  const feature = {\n    layer: layer,\n    type: 0,\n    properties: {},\n  };\n  pbf.readFields(featurePBFReader, feature, end);\n  return feature;\n}\n\n/**\n * @param {number} type The raw feature's geometry type\n * @param {number} numEnds Number of ends of the flat coordinates of the\n * geometry.\n * @return {import(\"../render/Feature.js\").Type} The geometry type.\n */\nfunction getGeometryType(type, numEnds) {\n  /** @type {import(\"../render/Feature.js\").Type} */\n  let geometryType;\n  if (type === 1) {\n    geometryType = numEnds === 1 ? 'Point' : 'MultiPoint';\n  } else if (type === 2) {\n    geometryType = numEnds === 1 ? 'LineString' : 'MultiLineString';\n  } else if (type === 3) {\n    geometryType = 'Polygon';\n    // MultiPolygon not relevant for rendering - winding order determines\n    // outer rings of polygons.\n  }\n  return geometryType;\n}\n\nexport default MVT;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}