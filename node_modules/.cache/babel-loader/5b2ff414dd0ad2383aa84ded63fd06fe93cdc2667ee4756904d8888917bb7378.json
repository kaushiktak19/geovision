{"ast":null,"code":"/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, pattern, wildCard, singleChar, escapeChar, matchCase) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\nexport default IsLike;","map":{"version":3,"names":["Comparison","IsLike","constructor","propertyName","pattern","wildCard","singleChar","escapeChar","matchCase","undefined"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/format/filter/IsLike.js"],"sourcesContent":["/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase,\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default IsLike;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,SAASD,UAAU,CAAC;EAC9B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAWA,CACTC,YAAY,EACZC,OAAO,EACPC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,SAAS,EACT;IACA,KAAK,CAAC,gBAAgB,EAAEL,YAAY,CAAC;;IAErC;AACJ;AACA;IACI,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;AACJ;AACA;IACI,IAAI,CAACC,QAAQ,GAAGA,QAAQ,KAAKI,SAAS,GAAGJ,QAAQ,GAAG,GAAG;;IAEvD;AACJ;AACA;IACI,IAAI,CAACC,UAAU,GAAGA,UAAU,KAAKG,SAAS,GAAGH,UAAU,GAAG,GAAG;;IAE7D;AACJ;AACA;IACI,IAAI,CAACC,UAAU,GAAGA,UAAU,KAAKE,SAAS,GAAGF,UAAU,GAAG,GAAG;;IAE7D;AACJ;AACA;IACI,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;AACF;AAEA,eAAeP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}