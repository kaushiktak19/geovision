{"ast":null,"code":"/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\nexport default And;","map":{"version":3,"names":["LogicalNary","And","constructor","conditions","Array","prototype","slice","call","arguments"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/format/filter/And.js"],"sourcesContent":["/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,SAASD,WAAW,CAAC;EAC5B;AACF;AACA;EACEE,WAAWA,CAACC,UAAU,EAAE;IACtB,KAAK,CAAC,KAAK,EAAEC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC;EACrD;AACF;AAEA,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}