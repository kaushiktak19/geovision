{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\population-density-map\\\\src\\\\components\\\\MapComponent.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n\n//         const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: new Style({\n//                 fill: new Fill({\n//                     color: 'rgba(0, 0, 255, 0.1)',\n//                 }),\n//                 stroke: new Stroke({\n//                     color: '#319FD3',\n//                     width: 1,\n//                 }),\n//             }),\n//         });\n\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n\n//         const map = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 vectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4,\n//             }),\n//             overlays: [overlay],\n//         });\n\n//         const handlePointerMove = (event: any) => {\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 setPopupContent(`State: ${name}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n\n//         map.on('pointermove', handlePointerMove);\n\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             map.un('pointermove', handlePointerMove);\n//             map.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default MapComponent;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZ from 'ol/source/XYZ';\nimport { fromLonLat } from 'ol/proj';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport { Style, Fill, Stroke } from 'ol/style';\nimport { GeoJSON } from 'ol/format';\nimport Overlay from 'ol/Overlay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const mapElement = useRef(null);\n  const popupElement = useRef(null); // Create a ref for the popup element\n  const [popupContent, setPopupContent] = useState('');\n  const [popupPosition, setPopupPosition] = useState([]);\n  const [hoveredFeature, setHoveredFeature] = useState(null);\n  useEffect(() => {\n    if (!mapElement.current || !popupElement.current) return;\n    const vectorSource = new VectorSource({\n      url: 'https://openlayers.org/data/vector/us-states.json',\n      format: new GeoJSON()\n    });\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: feature => new Style({\n        fill: new Fill({\n          color: feature === hoveredFeature ? 'rgba(0, 0, 255, 0)' : 'rgba(0, 0, 255, 0.1)'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3',\n          width: 1\n        })\n      })\n    });\n    const overlay = new Overlay({\n      element: popupElement.current,\n      autoPan: {\n        animation: {\n          duration: 250\n        }\n      }\n    });\n    const map = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        })\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.7129, 37.0902]),\n        // Centered on the USA\n        zoom: 4\n      }),\n      overlays: [overlay]\n    });\n    const handlePointerMove = event => {\n      map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n      const feature = map.getFeaturesAtPixel(event.pixel)[0];\n      if (feature) {\n        const coordinates = event.coordinate;\n        const name = feature.get('name');\n        setPopupContent(`State: ${name}`);\n        setPopupPosition(coordinates);\n        overlay.setPosition(coordinates);\n        setHoveredFeature(feature);\n      } else {\n        overlay.setPosition(undefined);\n        setHoveredFeature(null);\n      }\n      vectorLayer.setStyle(vectorLayer.getStyle());\n    };\n    map.on('pointermove', handlePointerMove);\n\n    // Cleanup function to properly remove the map and overlay\n    return () => {\n      map.un('pointermove', handlePointerMove);\n      map.setTarget(undefined);\n      overlay.setElement(undefined);\n    };\n  }, [hoveredFeature]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: popupElement,\n      id: \"popup\",\n      className: \"ol-popup\",\n      style: {\n        position: 'absolute',\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '5px',\n        border: '1px solid black',\n        whiteSpace: 'nowrap',\n        transform: 'translateY(10px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: popupContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MapComponent, \"PICc2PjkBng06o6huncZ0QpWDAY=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","XYZ","fromLonLat","VectorLayer","VectorSource","Style","Fill","Stroke","GeoJSON","Overlay","jsxDEV","_jsxDEV","Fragment","_Fragment","MapComponent","_s","mapElement","popupElement","popupContent","setPopupContent","popupPosition","setPopupPosition","hoveredFeature","setHoveredFeature","current","vectorSource","url","format","vectorLayer","source","style","feature","fill","color","stroke","width","overlay","element","autoPan","animation","duration","map","target","layers","view","center","zoom","overlays","handlePointerMove","event","getTargetElement","cursor","hasFeatureAtPixel","pixel","getFeaturesAtPixel","coordinates","coordinate","name","get","setPosition","undefined","setStyle","getStyle","on","un","setTarget","setElement","children","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","id","className","position","backgroundColor","padding","borderRadius","border","whiteSpace","transform","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/population-density-map/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: new Style({\r\n//                 fill: new Fill({\r\n//                     color: 'rgba(0, 0, 255, 0.1)',\r\n//                 }),\r\n//                 stroke: new Stroke({\r\n//                     color: '#319FD3',\r\n//                     width: 1,\r\n//                 }),\r\n//             }),\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const map = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 vectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 setPopupContent(`State: ${name}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         map.on('pointermove', handlePointerMove);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             map.un('pointermove', handlePointerMove);\r\n//             map.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Fill, Stroke } from 'ol/style';\r\nimport { GeoJSON } from 'ol/format';\r\nimport Overlay from 'ol/Overlay';\r\n\r\nconst MapComponent: React.FC = () => {\r\n    const mapElement = useRef<HTMLDivElement | null>(null);\r\n    const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n    const [popupContent, setPopupContent] = useState<string>('');\r\n    const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n    const [hoveredFeature, setHoveredFeature] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        if (!mapElement.current || !popupElement.current) return;\r\n\r\n        const vectorSource = new VectorSource({\r\n            url: 'https://openlayers.org/data/vector/us-states.json',\r\n            format: new GeoJSON(),\r\n        });\r\n\r\n        const vectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            style: (feature) => new Style({\r\n                fill: new Fill({\r\n                    color: feature === hoveredFeature ? 'rgba(0, 0, 255, 0)' : 'rgba(0, 0, 255, 0.1)',\r\n                }),\r\n                stroke: new Stroke({\r\n                    color: '#319FD3',\r\n                    width: 1,\r\n                }),\r\n            }),\r\n        });\r\n\r\n        const overlay = new Overlay({\r\n            element: popupElement.current!,\r\n            autoPan: {\r\n                animation: {\r\n                    duration: 250,\r\n                },\r\n            },\r\n        });\r\n\r\n        const map = new Map({\r\n            target: mapElement.current!,\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                    }),\r\n                }),\r\n                vectorLayer,\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n                zoom: 4,\r\n            }),\r\n            overlays: [overlay],\r\n        });\r\n\r\n        const handlePointerMove = (event: any) => {\r\n            map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n            const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n            if (feature) {\r\n                const coordinates = event.coordinate;\r\n                const name = feature.get('name');\r\n                setPopupContent(`State: ${name}`);\r\n                setPopupPosition(coordinates);\r\n                overlay.setPosition(coordinates);\r\n                setHoveredFeature(feature);\r\n            } else {\r\n                overlay.setPosition(undefined);\r\n                setHoveredFeature(null);\r\n            }\r\n            vectorLayer.setStyle(vectorLayer.getStyle());\r\n        };\r\n\r\n        map.on('pointermove', handlePointerMove);\r\n\r\n        // Cleanup function to properly remove the map and overlay\r\n        return () => {\r\n            map.un('pointermove', handlePointerMove);\r\n            map.setTarget(undefined);\r\n            overlay.setElement(undefined);\r\n        };\r\n    }, [hoveredFeature]);\r\n\r\n    return (\r\n        <>\r\n            <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n            <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n                <div>{popupContent}</div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,SAASC,GAAG,EAAEC,IAAI,QAAQ,IAAI;AAC9B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,GAAG,MAAM,eAAe;AAC/B,SAASC,UAAU,QAAQ,SAAS;AACpC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,KAAK,EAAEC,IAAI,EAAEC,MAAM,QAAQ,UAAU;AAC9C,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,OAAO,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,UAAU,GAAGpB,MAAM,CAAwB,IAAI,CAAC;EACtD,MAAMqB,YAAY,GAAGrB,MAAM,CAAwB,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAS,EAAE,CAAC;EAC5D,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAACyB,cAAc,EAAEC,iBAAiB,CAAC,GAAG1B,QAAQ,CAAM,IAAI,CAAC;EAE/DF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACqB,UAAU,CAACQ,OAAO,IAAI,CAACP,YAAY,CAACO,OAAO,EAAE;IAElD,MAAMC,YAAY,GAAG,IAAIrB,YAAY,CAAC;MAClCsB,GAAG,EAAE,mDAAmD;MACxDC,MAAM,EAAE,IAAInB,OAAO,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMoB,WAAW,GAAG,IAAIzB,WAAW,CAAC;MAChC0B,MAAM,EAAEJ,YAAY;MACpBK,KAAK,EAAGC,OAAO,IAAK,IAAI1B,KAAK,CAAC;QAC1B2B,IAAI,EAAE,IAAI1B,IAAI,CAAC;UACX2B,KAAK,EAAEF,OAAO,KAAKT,cAAc,GAAG,oBAAoB,GAAG;QAC/D,CAAC,CAAC;QACFY,MAAM,EAAE,IAAI3B,MAAM,CAAC;UACf0B,KAAK,EAAE,SAAS;UAChBE,KAAK,EAAE;QACX,CAAC;MACL,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,OAAO,GAAG,IAAI3B,OAAO,CAAC;MACxB4B,OAAO,EAAEpB,YAAY,CAACO,OAAQ;MAC9Bc,OAAO,EAAE;QACLC,SAAS,EAAE;UACPC,QAAQ,EAAE;QACd;MACJ;IACJ,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAG,IAAI3C,GAAG,CAAC;MAChB4C,MAAM,EAAE1B,UAAU,CAACQ,OAAQ;MAC3BmB,MAAM,EAAE,CACJ,IAAI3C,SAAS,CAAC;QACV6B,MAAM,EAAE,IAAI5B,GAAG,CAAC;UACZyB,GAAG,EAAE;QACT,CAAC;MACL,CAAC,CAAC,EACFE,WAAW,CACd;MACDgB,IAAI,EAAE,IAAI7C,IAAI,CAAC;QACX8C,MAAM,EAAE3C,UAAU,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAAE;QACzC4C,IAAI,EAAE;MACV,CAAC,CAAC;MACFC,QAAQ,EAAE,CAACX,OAAO;IACtB,CAAC,CAAC;IAEF,MAAMY,iBAAiB,GAAIC,KAAU,IAAK;MACtCR,GAAG,CAACS,gBAAgB,CAAC,CAAC,CAACpB,KAAK,CAACqB,MAAM,GAAGV,GAAG,CAACW,iBAAiB,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,SAAS,GAAG,EAAE;MACzF,MAAMtB,OAAO,GAAGU,GAAG,CAACa,kBAAkB,CAACL,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;MACtD,IAAItB,OAAO,EAAE;QACT,MAAMwB,WAAW,GAAGN,KAAK,CAACO,UAAU;QACpC,MAAMC,IAAI,GAAG1B,OAAO,CAAC2B,GAAG,CAAC,MAAM,CAAC;QAChCvC,eAAe,CAAC,UAAUsC,IAAI,EAAE,CAAC;QACjCpC,gBAAgB,CAACkC,WAAW,CAAC;QAC7BnB,OAAO,CAACuB,WAAW,CAACJ,WAAW,CAAC;QAChChC,iBAAiB,CAACQ,OAAO,CAAC;MAC9B,CAAC,MAAM;QACHK,OAAO,CAACuB,WAAW,CAACC,SAAS,CAAC;QAC9BrC,iBAAiB,CAAC,IAAI,CAAC;MAC3B;MACAK,WAAW,CAACiC,QAAQ,CAACjC,WAAW,CAACkC,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC;IAEDrB,GAAG,CAACsB,EAAE,CAAC,aAAa,EAAEf,iBAAiB,CAAC;;IAExC;IACA,OAAO,MAAM;MACTP,GAAG,CAACuB,EAAE,CAAC,aAAa,EAAEhB,iBAAiB,CAAC;MACxCP,GAAG,CAACwB,SAAS,CAACL,SAAS,CAAC;MACxBxB,OAAO,CAAC8B,UAAU,CAACN,SAAS,CAAC;IACjC,CAAC;EACL,CAAC,EAAE,CAACtC,cAAc,CAAC,CAAC;EAEpB,oBACIX,OAAA,CAAAE,SAAA;IAAAsD,QAAA,gBACIxD,OAAA;MAAKyD,GAAG,EAAEpD,UAAW;MAACc,KAAK,EAAE;QAAEK,KAAK,EAAE,MAAM;QAAEkC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnE9D,OAAA;MAAKyD,GAAG,EAAEnD,YAAa;MAACyD,EAAE,EAAC,OAAO;MAACC,SAAS,EAAC,UAAU;MAAC7C,KAAK,EAAE;QAAE8C,QAAQ,EAAE,UAAU;QAAEC,eAAe,EAAE,0BAA0B;QAAEC,OAAO,EAAE,KAAK;QAAEC,YAAY,EAAE,KAAK;QAAEC,MAAM,EAAE,iBAAiB;QAAEC,UAAU,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAmB,CAAE;MAAAf,QAAA,eACtPxD,OAAA;QAAAwD,QAAA,EAAMjD;MAAY;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAC1D,EAAA,CAzFID,YAAsB;AAAAqE,EAAA,GAAtBrE,YAAsB;AA2F5B,eAAeA,YAAY;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}