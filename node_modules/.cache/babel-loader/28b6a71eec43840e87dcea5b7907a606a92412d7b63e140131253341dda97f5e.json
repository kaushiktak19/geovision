{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\population-density-map\\\\src\\\\components\\\\MapComponent.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n\n//         const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: new Style({\n//                 fill: new Fill({\n//                     color: 'rgba(0, 0, 255, 0.1)',\n//                 }),\n//                 stroke: new Stroke({\n//                     color: '#319FD3',\n//                     width: 1,\n//                 }),\n//             }),\n//         });\n\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n\n//         const map = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 vectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4,\n//             }),\n//             overlays: [overlay],\n//         });\n\n//         const handlePointerMove = (event: any) => {\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 setPopupContent(`State: ${name}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n\n//         map.on('pointermove', handlePointerMove);\n\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             map.un('pointermove', handlePointerMove);\n//             map.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default MapComponent;\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZ from 'ol/source/XYZ';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport { Style, Fill, Stroke } from 'ol/style';\nimport { GeoJSON } from 'ol/format';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const mapElement = useRef(null);\n  const overlayElement = useRef(null);\n  const [overlayContent, setOverlayContent] = useState('');\n  const [overlayVisible, setOverlayVisible] = useState(false);\n  const [map, setMap] = useState(null); // State to hold the map instance\n\n  useEffect(() => {\n    if (!mapElement.current || !overlayElement.current) return;\n    const vectorSource = new VectorSource({\n      url: 'https://openlayers.org/en/latest/examples/data/geojson/countries.geojson',\n      format: new GeoJSON()\n    });\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: new Style({\n        fill: new Fill({\n          color: 'rgba(0, 0, 255, 0.1)'\n        }),\n        stroke: new Stroke({\n          color: '#319FD3',\n          width: 1\n        })\n      })\n    });\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        })\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([0, 0]),\n        // Centered on the world map\n        zoom: 2\n      })\n    });\n    setMap(initialMap); // Save map instance to state\n\n    // Initialize overlay with element\n    const overlay = new Overlay({\n      element: overlayElement.current,\n      autoPan: {\n        animation: {\n          duration: 250\n        }\n      }\n    });\n    initialMap.addOverlay(overlay); // Add overlay to the map\n\n    const handlePointerMove = event => {\n      const feature = initialMap.getFeaturesAtPixel(event.pixel)[0];\n      if (feature) {\n        const name = feature.get('name');\n        const population = feature.get('population');\n        setOverlayContent(`${name} - Population: ${population}`);\n        overlay.setPosition(event.coordinate);\n        setOverlayVisible(true);\n      } else {\n        setOverlayVisible(false);\n      }\n    };\n    initialMap.on('pointermove', handlePointerMove); // Listen to pointermove event\n\n    return () => {\n      initialMap.un('pointermove', handlePointerMove); // Clean up event listener\n      initialMap.setTarget(); // Clear map target\n    };\n  }, []);\n\n  // CSS style for the overlay\n  const overlayStyle = {\n    position: 'absolute',\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\n    padding: '5px',\n    borderRadius: '5px',\n    border: '1px solid black',\n    whiteSpace: 'nowrap',\n    pointerEvents: 'none' // Ensure overlay doesn't capture mouse events\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), overlayVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: overlayElement,\n      className: \"ol-popup\",\n      style: {\n        ...overlayStyle,\n        left: '10px',\n        bottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: overlayContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"nTm+aMyR9wT5xFhH8T1hQomVaCc=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","XYZ","VectorLayer","VectorSource","Style","Fill","Stroke","GeoJSON","Overlay","fromLonLat","jsxDEV","_jsxDEV","MapComponent","_s","mapElement","overlayElement","overlayContent","setOverlayContent","overlayVisible","setOverlayVisible","map","setMap","current","vectorSource","url","format","vectorLayer","source","style","fill","color","stroke","width","initialMap","target","layers","view","center","zoom","overlay","element","autoPan","animation","duration","addOverlay","handlePointerMove","event","feature","getFeaturesAtPixel","pixel","name","get","population","setPosition","coordinate","on","un","setTarget","overlayStyle","position","backgroundColor","padding","borderRadius","border","whiteSpace","pointerEvents","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","left","bottom","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/population-density-map/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: new Style({\r\n//                 fill: new Fill({\r\n//                     color: 'rgba(0, 0, 255, 0.1)',\r\n//                 }),\r\n//                 stroke: new Stroke({\r\n//                     color: '#319FD3',\r\n//                     width: 1,\r\n//                 }),\r\n//             }),\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const map = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 vectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 setPopupContent(`State: ${name}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         map.on('pointermove', handlePointerMove);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             map.un('pointermove', handlePointerMove);\r\n//             map.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Fill, Stroke } from 'ol/style';\r\nimport { GeoJSON } from 'ol/format';\r\nimport Overlay from 'ol/Overlay';\r\nimport { fromLonLat } from 'ol/proj';\r\n\r\nconst MapComponent: React.FC = () => {\r\n    const mapElement = useRef<HTMLDivElement | null>(null);\r\n    const overlayElement = useRef<HTMLDivElement | null>(null);\r\n    const [overlayContent, setOverlayContent] = useState<string>('');\r\n    const [overlayVisible, setOverlayVisible] = useState<boolean>(false);\r\n    const [map, setMap] = useState<Map | null>(null); // State to hold the map instance\r\n\r\n    useEffect(() => {\r\n        if (!mapElement.current || !overlayElement.current) return;\r\n\r\n        const vectorSource = new VectorSource({\r\n            url: 'https://openlayers.org/en/latest/examples/data/geojson/countries.geojson',\r\n            format: new GeoJSON(),\r\n        });\r\n\r\n        const vectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: 'rgba(0, 0, 255, 0.1)',\r\n                }),\r\n                stroke: new Stroke({\r\n                    color: '#319FD3',\r\n                    width: 1,\r\n                }),\r\n            }),\r\n        });\r\n\r\n        const initialMap = new Map({\r\n            target: mapElement.current!,\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                    }),\r\n                }),\r\n                vectorLayer,\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([0, 0]), // Centered on the world map\r\n                zoom: 2,\r\n            }),\r\n        });\r\n\r\n        setMap(initialMap); // Save map instance to state\r\n\r\n        // Initialize overlay with element\r\n        const overlay = new Overlay({\r\n            element: overlayElement.current!,\r\n            autoPan: {\r\n                animation: {\r\n                    duration: 250,\r\n                },\r\n            },\r\n        });\r\n\r\n        initialMap.addOverlay(overlay); // Add overlay to the map\r\n\r\n        const handlePointerMove = (event: any) => {\r\n            const feature = initialMap.getFeaturesAtPixel(event.pixel)[0];\r\n            if (feature) {\r\n                const name = feature.get('name');\r\n                const population = feature.get('population');\r\n                setOverlayContent(`${name} - Population: ${population}`);\r\n                overlay.setPosition(event.coordinate);\r\n                setOverlayVisible(true);\r\n            } else {\r\n                setOverlayVisible(false);\r\n            }\r\n        };\r\n\r\n        initialMap.on('pointermove', handlePointerMove); // Listen to pointermove event\r\n\r\n        return () => {\r\n            initialMap.un('pointermove', handlePointerMove); // Clean up event listener\r\n            initialMap.setTarget(); // Clear map target\r\n        };\r\n    }, []);\r\n\r\n    // CSS style for the overlay\r\n    const overlayStyle: React.CSSProperties = {\r\n        position: 'absolute',\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n        padding: '5px',\r\n        borderRadius: '5px',\r\n        border: '1px solid black',\r\n        whiteSpace: 'nowrap',\r\n        pointerEvents: 'none', // Ensure overlay doesn't capture mouse events\r\n    };\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100vh' }}>\r\n            <div ref={mapElement} style={{ width: '100%', height: '100%' }} />\r\n            {overlayVisible && (\r\n                <div ref={overlayElement} className=\"ol-popup\" style={{ ...overlayStyle, left: '10px', bottom: '10px' }}>\r\n                    <div>{overlayContent}</div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,KAAK,EAAEC,IAAI,EAAEC,MAAM,QAAQ,UAAU;AAC9C,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,OAAO,MAAM,YAAY;AAChC,SAASC,UAAU,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,UAAU,GAAGlB,MAAM,CAAwB,IAAI,CAAC;EACtD,MAAMmB,cAAc,GAAGnB,MAAM,CAAwB,IAAI,CAAC;EAC1D,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,QAAQ,CAAS,EAAE,CAAC;EAChE,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAU,KAAK,CAAC;EACpE,MAAM,CAACuB,GAAG,EAAEC,MAAM,CAAC,GAAGxB,QAAQ,CAAa,IAAI,CAAC,CAAC,CAAC;;EAElDF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACmB,UAAU,CAACQ,OAAO,IAAI,CAACP,cAAc,CAACO,OAAO,EAAE;IAEpD,MAAMC,YAAY,GAAG,IAAIpB,YAAY,CAAC;MAClCqB,GAAG,EAAE,0EAA0E;MAC/EC,MAAM,EAAE,IAAIlB,OAAO,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMmB,WAAW,GAAG,IAAIxB,WAAW,CAAC;MAChCyB,MAAM,EAAEJ,YAAY;MACpBK,KAAK,EAAE,IAAIxB,KAAK,CAAC;QACbyB,IAAI,EAAE,IAAIxB,IAAI,CAAC;UACXyB,KAAK,EAAE;QACX,CAAC,CAAC;QACFC,MAAM,EAAE,IAAIzB,MAAM,CAAC;UACfwB,KAAK,EAAE,SAAS;UAChBE,KAAK,EAAE;QACX,CAAC;MACL,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAG,IAAInC,GAAG,CAAC;MACvBoC,MAAM,EAAEpB,UAAU,CAACQ,OAAQ;MAC3Ba,MAAM,EAAE,CACJ,IAAInC,SAAS,CAAC;QACV2B,MAAM,EAAE,IAAI1B,GAAG,CAAC;UACZuB,GAAG,EAAE;QACT,CAAC;MACL,CAAC,CAAC,EACFE,WAAW,CACd;MACDU,IAAI,EAAE,IAAIrC,IAAI,CAAC;QACXsC,MAAM,EAAE5B,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAAE;QAC5B6B,IAAI,EAAE;MACV,CAAC;IACL,CAAC,CAAC;IAEFjB,MAAM,CAACY,UAAU,CAAC,CAAC,CAAC;;IAEpB;IACA,MAAMM,OAAO,GAAG,IAAI/B,OAAO,CAAC;MACxBgC,OAAO,EAAEzB,cAAc,CAACO,OAAQ;MAChCmB,OAAO,EAAE;QACLC,SAAS,EAAE;UACPC,QAAQ,EAAE;QACd;MACJ;IACJ,CAAC,CAAC;IAEFV,UAAU,CAACW,UAAU,CAACL,OAAO,CAAC,CAAC,CAAC;;IAEhC,MAAMM,iBAAiB,GAAIC,KAAU,IAAK;MACtC,MAAMC,OAAO,GAAGd,UAAU,CAACe,kBAAkB,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;MAC7D,IAAIF,OAAO,EAAE;QACT,MAAMG,IAAI,GAAGH,OAAO,CAACI,GAAG,CAAC,MAAM,CAAC;QAChC,MAAMC,UAAU,GAAGL,OAAO,CAACI,GAAG,CAAC,YAAY,CAAC;QAC5ClC,iBAAiB,CAAC,GAAGiC,IAAI,kBAAkBE,UAAU,EAAE,CAAC;QACxDb,OAAO,CAACc,WAAW,CAACP,KAAK,CAACQ,UAAU,CAAC;QACrCnC,iBAAiB,CAAC,IAAI,CAAC;MAC3B,CAAC,MAAM;QACHA,iBAAiB,CAAC,KAAK,CAAC;MAC5B;IACJ,CAAC;IAEDc,UAAU,CAACsB,EAAE,CAAC,aAAa,EAAEV,iBAAiB,CAAC,CAAC,CAAC;;IAEjD,OAAO,MAAM;MACTZ,UAAU,CAACuB,EAAE,CAAC,aAAa,EAAEX,iBAAiB,CAAC,CAAC,CAAC;MACjDZ,UAAU,CAACwB,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAiC,GAAG;IACtCC,QAAQ,EAAE,UAAU;IACpBC,eAAe,EAAE,0BAA0B;IAC3CC,OAAO,EAAE,KAAK;IACdC,YAAY,EAAE,KAAK;IACnBC,MAAM,EAAE,iBAAiB;IACzBC,UAAU,EAAE,QAAQ;IACpBC,aAAa,EAAE,MAAM,CAAE;EAC3B,CAAC;EAED,oBACItD,OAAA;IAAKiB,KAAK,EAAE;MAAEI,KAAK,EAAE,MAAM;MAAEkC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAC3CxD,OAAA;MAAKyD,GAAG,EAAEtD,UAAW;MAACc,KAAK,EAAE;QAAEI,KAAK,EAAE,MAAM;QAAEkC,MAAM,EAAE;MAAO;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACjEtD,cAAc,iBACXP,OAAA;MAAKyD,GAAG,EAAErD,cAAe;MAAC0D,SAAS,EAAC,UAAU;MAAC7C,KAAK,EAAE;QAAE,GAAG8B,YAAY;QAAEgB,IAAI,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO,CAAE;MAAAR,QAAA,eACpGxD,OAAA;QAAAwD,QAAA,EAAMnD;MAAc;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC3D,EAAA,CApGID,YAAsB;AAAAgE,EAAA,GAAtBhE,YAAsB;AAsG5B,eAAeA,YAAY;AAAC,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}