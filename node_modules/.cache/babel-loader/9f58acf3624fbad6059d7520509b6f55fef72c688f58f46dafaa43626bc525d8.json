{"ast":null,"code":"/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { containsExtent } from '../extent.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  Point: readPointGeometry,\n  LineString: readLineStringGeometry,\n  Polygon: readPolygonGeometry,\n  MultiPoint: readMultiPointGeometry,\n  MultiLineString: readMultiLineStringGeometry,\n  MultiPolygon: readMultiPolygonGeometry\n};\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nconst GEOMETRY_WRITERS = {\n  Point: writePointGeometry,\n  LineString: writeLineStringGeometry,\n  Polygon: writePolygonGeometry,\n  MultiPoint: writeMultiPointGeometry,\n  MultiLineString: writeMultiLineStringGeometry,\n  MultiPolygon: writeMultiPolygonGeometry\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nclass EsriJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super();\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @param {string} [idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options, idField) {\n    const esriJSONFeature = /** @type {EsriJSONFeature} */object;\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n    feature.setGeometry(geometry);\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      const id = esriJSONFeature.attributes[idField];\n      if (id !== undefined) {\n        feature.setId( /** @type {number} */id);\n      }\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    options = options ? options : {};\n    if (object['features']) {\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */object;\n      /** @type {Array<import(\"../Feature.js\").default>} */\n      const features = [];\n      const esriJSONFeatures = esriJSONFeatureSet.features;\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(esriJSONFeatures[i], options, object.objectIdFieldName));\n      }\n      return features;\n    }\n    return [this.readFeatureFromObject(object, options)];\n  }\n\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */\n      object['spatialReference'];\n      const crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    }\n    return null;\n  }\n\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n    const object = {};\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, options);\n      const projection = options && (options.dataProjection || options.featureProjection);\n      if (projection) {\n        object['geometry']['spatialReference'] = /** @type {EsriJSONSpatialReferenceWkid} */{\n          wkid: Number(getProjection(projection).getCode().split(':').pop())\n        };\n      }\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      'features': objects\n    };\n  }\n}\n\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let type;\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = 'Point';\n  } else if (object['points']) {\n    type = 'MultiPoint';\n  } else if (object['paths']) {\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */object;\n    if (esriJSONPolyline.paths.length === 1) {\n      type = 'LineString';\n    } else {\n      type = 'MultiLineString';\n    }\n  } else if (object['rings']) {\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */object;\n    const layout = getGeometryLayout(esriJSONPolygon);\n    const rings = convertRings(esriJSONPolygon.rings, layout);\n    if (rings.length === 1) {\n      type = 'Polygon';\n      object = Object.assign({}, object, {\n        ['rings']: rings[0]\n      });\n    } else {\n      type = 'MultiPolygon';\n      object = Object.assign({}, object, {\n        ['rings']: rings\n      });\n    }\n  }\n  const geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, options);\n}\n\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n  const flatRing = [];\n  const outerRings = [];\n  const holes = [];\n  let i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\n    // is this ring an outer ring? is it clockwise?\n    const clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n  while (holes.length) {\n    const hole = holes.shift();\n    let matched = false;\n    // loop over all outer rings and see if they contain our hole.\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      const outerRing = outerRings[i][0];\n      const containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n  return outerRings;\n}\n\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n  let point;\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], 'XYZ');\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], 'XYM');\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n  return point;\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  if (object.hasZ === true && object.hasM === true) {\n    layout = 'XYZM';\n  } else if (object.hasZ === true) {\n    layout = 'XYZ';\n  } else if (object.hasM === true) {\n    layout = 'XYM';\n  }\n  return layout;\n}\n\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  const coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n  let esriJSON;\n  const layout = geometry.getLayout();\n  if (layout === 'XYZ') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2]\n    };\n  } else if (layout === 'XYM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2]\n    };\n  } else if (layout === 'XYZM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3]\n    };\n  } else if (layout === 'XY') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1]\n    };\n  } else {\n    throw new Error('Invalid geometry layout');\n  }\n  return esriJSON;\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n  const layout = geometry.getLayout();\n  return {\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\n    hasM: layout === 'XYM' || layout === 'XYZM'\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, options) {\n  const hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [( /** @type {Array<EsriJSONPosition>} */lineString.getCoordinates())]\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, options) {\n  // Esri geometries use the left-hand rule\n  const hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: ( /** @type {Array<Array<EsriJSONPosition>>} */\n    polygon.getCoordinates(false))\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, options) {\n  const hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: ( /** @type {Array<Array<EsriJSONPosition>>} */\n    multiLineString.getCoordinates())\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, options) {\n  const hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points: ( /** @type {Array<EsriJSONPosition>} */\n    multiPoint.getCoordinates())\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  const hasZM = getHasZM(geometry);\n  const coordinates = geometry.getCoordinates(false);\n  const output = [];\n  for (let i = 0; i < coordinates.length; i++) {\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: ( /** @type {Array<Array<EsriJSONPosition>>} */output)\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(transformGeometryWithOptions(geometry, true, options), options);\n}\nexport default EsriJSON;","map":{"version":3,"names":["Feature","JSONFeature","LineString","LinearRing","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","containsExtent","deflateCoordinates","get","getProjection","isEmpty","linearRingIsClockwise","transformGeometryWithOptions","GEOMETRY_READERS","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","GEOMETRY_WRITERS","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","EsriJSON","constructor","options","geometryName_","geometryName","readFeatureFromObject","object","idField","esriJSONFeature","geometry","readGeometry","feature","setGeometryName","setGeometry","attributes","setProperties","id","undefined","setId","readFeaturesFromObject","esriJSONFeatureSet","features","esriJSONFeatures","i","ii","length","push","objectIdFieldName","readGeometryFromObject","readProjectionFromObject","spatialReference","crs","wkid","writeGeometryObject","writeGeometry","adaptOptions","writeFeatureObject","hasProperties","properties","getProperties","getGeometry","projection","dataProjection","featureProjection","Number","getCode","split","pop","getGeometryName","writeFeaturesObject","objects","type","esriJSONPolyline","paths","esriJSONPolygon","layout","getGeometryLayout","rings","convertRings","Object","assign","geometryReader","flatRing","outerRings","holes","clockwise","hole","shift","matched","outerRing","containsHole","getExtent","reverse","point","m","z","x","y","hasZ","hasM","points","coordinates","getCoordinates","esriJSON","getLayout","Error","getHasZM","lineString","hasZM","polygon","multiLineString","multiPoint","output","geometryWriter","getType"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/format/EsriJSON.js"],"sourcesContent":["/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {containsExtent} from '../extent.js';\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  Point: readPointGeometry,\n  LineString: readLineStringGeometry,\n  Polygon: readPolygonGeometry,\n  MultiPoint: readMultiPointGeometry,\n  MultiLineString: readMultiLineStringGeometry,\n  MultiPolygon: readMultiPolygonGeometry,\n};\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nconst GEOMETRY_WRITERS = {\n  Point: writePointGeometry,\n  LineString: writeLineStringGeometry,\n  Polygon: writePolygonGeometry,\n  MultiPoint: writeMultiPointGeometry,\n  MultiLineString: writeMultiLineStringGeometry,\n  MultiPolygon: writeMultiPolygonGeometry,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nclass EsriJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @param {string} [idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options, idField) {\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\n    const geometry = readGeometry(esriJSONFeature.geometry, options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n    feature.setGeometry(geometry);\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      const id = esriJSONFeature.attributes[idField];\n      if (id !== undefined) {\n        feature.setId(/** @type {number} */ (id));\n      }\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    options = options ? options : {};\n    if (object['features']) {\n      const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\n      /** @type {Array<import(\"../Feature.js\").default>} */\n      const features = [];\n      const esriJSONFeatures = esriJSONFeatureSet.features;\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(\n          this.readFeatureFromObject(\n            esriJSONFeatures[i],\n            options,\n            object.objectIdFieldName,\n          ),\n        );\n      }\n      return features;\n    }\n    return [this.readFeatureFromObject(object, options)];\n  }\n\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    if (\n      object['spatialReference'] &&\n      object['spatialReference']['wkid'] !== undefined\n    ) {\n      const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (\n        object['spatialReference']\n      );\n      const crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    }\n    return null;\n  }\n\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n    const object = {};\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, options);\n      const projection =\n        options && (options.dataProjection || options.featureProjection);\n      if (projection) {\n        object['geometry']['spatialReference'] =\n          /** @type {EsriJSONSpatialReferenceWkid} */ ({\n            wkid: Number(getProjection(projection).getCode().split(':').pop()),\n          });\n      }\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      'features': objects,\n    };\n  }\n}\n\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/Geometry.js\").Type} */\n  let type;\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = 'Point';\n  } else if (object['points']) {\n    type = 'MultiPoint';\n  } else if (object['paths']) {\n    const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\n    if (esriJSONPolyline.paths.length === 1) {\n      type = 'LineString';\n    } else {\n      type = 'MultiLineString';\n    }\n  } else if (object['rings']) {\n    const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\n    const layout = getGeometryLayout(esriJSONPolygon);\n    const rings = convertRings(esriJSONPolygon.rings, layout);\n    if (rings.length === 1) {\n      type = 'Polygon';\n      object = Object.assign({}, object, {['rings']: rings[0]});\n    } else {\n      type = 'MultiPolygon';\n      object = Object.assign({}, object, {['rings']: rings});\n    }\n  }\n  const geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, options);\n}\n\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/Geometry.js\").GeometryLayout} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n  const flatRing = [];\n  const outerRings = [];\n  const holes = [];\n  let i, ii;\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\n    // is this ring an outer ring? is it clockwise?\n    const clockwise = linearRingIsClockwise(\n      flatRing,\n      0,\n      flatRing.length,\n      layout.length,\n    );\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n  while (holes.length) {\n    const hole = holes.shift();\n    let matched = false;\n    // loop over all outer rings and see if they contain our hole.\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      const outerRing = outerRings[i][0];\n      const containsHole = containsExtent(\n        new LinearRing(outerRing).getExtent(),\n        new LinearRing(hole).getExtent(),\n      );\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n  return outerRings;\n}\n\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n  let point;\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], 'XYZM');\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], 'XYZ');\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], 'XYM');\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n  return point;\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/Geometry.js\").GeometryLayout} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n  /** @type {import(\"../geom/Geometry.js\").GeometryLayout} */\n  let layout = 'XY';\n  if (object.hasZ === true && object.hasM === true) {\n    layout = 'XYZM';\n  } else if (object.hasZ === true) {\n    layout = 'XYZ';\n  } else if (object.hasM === true) {\n    layout = 'XYM';\n  }\n  return layout;\n}\n\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  const coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n  let esriJSON;\n  const layout = geometry.getLayout();\n  if (layout === 'XYZ') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n    };\n  } else if (layout === 'XYM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2],\n    };\n  } else if (layout === 'XYZM') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3],\n    };\n  } else if (layout === 'XY') {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n    };\n  } else {\n    throw new Error('Invalid geometry layout');\n  }\n  return esriJSON;\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n  const layout = geometry.getLayout();\n  return {\n    hasZ: layout === 'XYZ' || layout === 'XYZM',\n    hasM: layout === 'XYM' || layout === 'XYZM',\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, options) {\n  const hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n      /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\n    ],\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, options) {\n  // Esri geometries use the left-hand rule\n  const hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      polygon.getCoordinates(false)\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, options) {\n  const hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: /** @type {Array<Array<EsriJSONPosition>>} */ (\n      multiLineString.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, options) {\n  const hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points: /** @type {Array<EsriJSONPosition>} */ (\n      multiPoint.getCoordinates()\n    ),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  const hasZM = getHasZM(geometry);\n  const coordinates = geometry.getCoordinates(false);\n  const output = [];\n  for (let i = 0; i < coordinates.length; i++) {\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(\n    transformGeometryWithOptions(geometry, true, options),\n    options,\n  );\n}\n\nexport default EsriJSON;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}