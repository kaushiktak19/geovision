{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport RenderFeature from '../render/Feature.js';\nimport { createGeometry, createRenderFeature, transformGeometryWithOptions } from './Feature.js';\nimport { deflateCoordinatesArray, deflateMultiCoordinatesArray } from '../geom/flat/deflate.js';\nimport { getLayoutForStride } from '../geom/SimpleGeometry.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureClass} FeatureClassToFeature\n * @typedef {Object} Options\n *\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n * @property {FeatureClassToFeature} [featureClass] Feature class\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\n * the primary concern, and features are not going to be modified or round-tripped through the format,\n * consider using {@link module:ol/render/Feature~RenderFeature}\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @template {import('../Feature.js').FeatureClass} [T=typeof Feature]\n * @extends {JSONFeature<T>}\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options<T>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    if (options.featureClass) {\n      this.featureClass = options.featureClass;\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the `geometry_name` in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n    this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Feature|RenderFeature|Array<RenderFeature>}.default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': ( /** @type {GeoJSONGeometry} */object),\n        'properties': null\n      };\n    }\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\n    if (this.featureClass === RenderFeature) {\n      return createRenderFeature({\n        geometry,\n        id: geoJSONFeature['id'],\n        properties: geoJSONFeature['properties']\n      }, options);\n    }\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(createGeometry(geometry, options));\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature|RenderFeature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */object;\n    /** @type {Array<Feature|RenderFeature|Array<RenderFeature>>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        const featureObject = this.readFeatureFromObject(geoJSONFeatures[i], options);\n        if (!featureObject) {\n          continue;\n        }\n        features.push(featureObject);\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features.flat();\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */projection;\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n    if (!feature.hasProperties()) {\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\n */\nfunction readGeometryInternal(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /** @type {import(\"./Feature.js\").GeometryObject} */\n  let geometry;\n  switch (object['type']) {\n    case 'Point':\n      {\n        geometry = readPointGeometry( /** @type {GeoJSONPoint} */object);\n        break;\n      }\n    case 'LineString':\n      {\n        geometry = readLineStringGeometry( /** @type {GeoJSONLineString} */object);\n        break;\n      }\n    case 'Polygon':\n      {\n        geometry = readPolygonGeometry( /** @type {GeoJSONPolygon} */object);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geometry = readMultiPointGeometry( /** @type {GeoJSONMultiPoint} */object);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geometry = readMultiLineStringGeometry( /** @type {GeoJSONMultiLineString} */object);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geometry = readMultiPolygonGeometry( /** @type {GeoJSONMultiPolygon} */object);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geometry = readGeometryCollectionGeometry( /** @type {GeoJSONGeometryCollection} */object);\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object['type']);\n      }\n  }\n  return geometry;\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  const geometryObject = readGeometryInternal(object, options);\n  return createGeometry(geometryObject, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometryInternal(geometry, options);\n  });\n  return geometries;\n}\n\n/**\n * @param {GeoJSONPoint} object Input object.\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\n */\nfunction readPointGeometry(object) {\n  const flatCoordinates = object['coordinates'];\n  return {\n    type: 'Point',\n    flatCoordinates,\n    layout: getLayoutForStride(flatCoordinates.length)\n  };\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\n */\nfunction readLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = coordinates.flat();\n  return {\n    type: 'LineString',\n    flatCoordinates,\n    ends: [flatCoordinates.length],\n    layout: getLayoutForStride(coordinates[0]?.length || 2)\n  };\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\n */\nfunction readMultiLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const stride = coordinates[0]?.[0]?.length || 2;\n  const flatCoordinates = [];\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiLineString',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\n */\nfunction readMultiPointGeometry(object) {\n  const coordinates = object['coordinates'];\n  return {\n    type: 'MultiPoint',\n    flatCoordinates: coordinates.flat(),\n    layout: getLayoutForStride(coordinates[0]?.length || 2)\n  };\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\n */\nfunction readMultiPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.[0].length || 2;\n  const endss = deflateMultiCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiPolygon',\n    flatCoordinates,\n    ends: endss,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.length;\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'Polygon',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride)\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point':\n      {\n        geoJSON = writePointGeometry( /** @type {import(\"../geom/Point.js\").default} */geometry, options);\n        break;\n      }\n    case 'LineString':\n      {\n        geoJSON = writeLineStringGeometry( /** @type {import(\"../geom/LineString.js\").default} */geometry, options);\n        break;\n      }\n    case 'Polygon':\n      {\n        geoJSON = writePolygonGeometry( /** @type {import(\"../geom/Polygon.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geoJSON = writeMultiPointGeometry( /** @type {import(\"../geom/MultiPoint.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geoJSON = writeMultiLineStringGeometry( /** @type {import(\"../geom/MultiLineString.js\").default} */geometry, options);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geoJSON = writeMultiPolygonGeometry( /** @type {import(\"../geom/MultiPolygon.js\").default} */geometry, options);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geoJSON = writeGeometryCollectionGeometry( /** @type {import(\"../geom/GeometryCollection.js\").default} */\n        geometry, options);\n        break;\n      }\n    case 'Circle':\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\nexport default GeoJSON;","map":{"version":3,"names":["Feature","JSONFeature","RenderFeature","createGeometry","createRenderFeature","transformGeometryWithOptions","deflateCoordinatesArray","deflateMultiCoordinatesArray","getLayoutForStride","get","getProjection","isEmpty","GeoJSON","constructor","options","dataProjection","featureProjection","defaultFeatureProjection","featureClass","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometryInternal","id","properties","feature","setGeometryName","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","featureObject","push","flat","readGeometryFromObject","readGeometry","readProjectionFromObject","crs","projection","Error","writeFeatureObject","adaptOptions","getId","undefined","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","readGeometryCollectionGeometry","geometryObject","geometries","map","flatCoordinates","layout","coordinates","ends","stride","endss","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","Object","assign","getGeometriesArray","getCoordinates","right","rightHanded"],"sources":["C:/Users/Asus/Desktop/population-density-map/node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport RenderFeature from '../render/Feature.js';\nimport {\n  createGeometry,\n  createRenderFeature,\n  transformGeometryWithOptions,\n} from './Feature.js';\nimport {\n  deflateCoordinatesArray,\n  deflateMultiCoordinatesArray,\n} from '../geom/flat/deflate.js';\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @template {import(\"../Feature.js\").FeatureClass} FeatureClassToFeature\n * @typedef {Object} Options\n *\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n * @property {FeatureClassToFeature} [featureClass] Feature class\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\n * the primary concern, and features are not going to be modified or round-tripped through the format,\n * consider using {@link module:ol/render/Feature~RenderFeature}\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @template {import('../Feature.js').FeatureClass} [T=typeof Feature]\n * @extends {JSONFeature<T>}\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options<T>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326',\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    if (options.featureClass) {\n      this.featureClass = options.featureClass;\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the `geometry_name` in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Feature|RenderFeature|Array<RenderFeature>}.default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\n    if (this.featureClass === RenderFeature) {\n      return createRenderFeature(\n        {\n          geometry,\n          id: geoJSONFeature['id'],\n          properties: geoJSONFeature['properties'],\n        },\n        options,\n      );\n    }\n\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(createGeometry(geometry, options));\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature|RenderFeature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<Feature|RenderFeature|Array<RenderFeature>>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        const featureObject = this.readFeatureFromObject(\n          geoJSONFeatures[i],\n          options,\n        );\n        if (!featureObject) {\n          continue;\n        }\n        features.push(featureObject);\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features.flat();\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\n */\nfunction readGeometryInternal(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /** @type {import(\"./Feature.js\").GeometryObject} */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object),\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object),\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object),\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object),\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object),\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return geometry;\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  const geometryObject = readGeometryInternal(object, options);\n  return createGeometry(geometryObject, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometryInternal(geometry, options);\n    },\n  );\n  return geometries;\n}\n\n/**\n * @param {GeoJSONPoint} object Input object.\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\n */\nfunction readPointGeometry(object) {\n  const flatCoordinates = object['coordinates'];\n  return {\n    type: 'Point',\n    flatCoordinates,\n    layout: getLayoutForStride(flatCoordinates.length),\n  };\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\n */\nfunction readLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = coordinates.flat();\n  return {\n    type: 'LineString',\n    flatCoordinates,\n    ends: [flatCoordinates.length],\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\n  };\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\n */\nfunction readMultiLineStringGeometry(object) {\n  const coordinates = object['coordinates'];\n  const stride = coordinates[0]?.[0]?.length || 2;\n  const flatCoordinates = [];\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'MultiLineString',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\n */\nfunction readMultiPointGeometry(object) {\n  const coordinates = object['coordinates'];\n  return {\n    type: 'MultiPoint',\n    flatCoordinates: coordinates.flat(),\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\n  };\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\n */\nfunction readMultiPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.[0].length || 2;\n  const endss = deflateMultiCoordinatesArray(\n    flatCoordinates,\n    0,\n    coordinates,\n    stride,\n  );\n  return {\n    type: 'MultiPolygon',\n    flatCoordinates,\n    ends: endss,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  const coordinates = object['coordinates'];\n  const flatCoordinates = [];\n  const stride = coordinates[0]?.[0]?.length;\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\n  return {\n    type: 'Polygon',\n    flatCoordinates,\n    ends,\n    layout: getLayoutForStride(stride),\n  };\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\n        options,\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n          geometry\n        ),\n        options,\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}