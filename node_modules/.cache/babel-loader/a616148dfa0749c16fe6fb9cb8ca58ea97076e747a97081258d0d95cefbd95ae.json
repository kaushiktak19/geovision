{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\population-density-map\\\\src\\\\components\\\\MapComponent.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n\n//         const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: new Style({\n//                 fill: new Fill({\n//                     color: 'rgba(0, 0, 255, 0.1)',\n//                 }),\n//                 stroke: new Stroke({\n//                     color: '#319FD3',\n//                     width: 1,\n//                 }),\n//             }),\n//         });\n\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n\n//         const map = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 vectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4,\n//             }),\n//             overlays: [overlay],\n//         });\n\n//         const handlePointerMove = (event: any) => {\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 setPopupContent(`State: ${name}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n\n//         map.on('pointermove', handlePointerMove);\n\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             map.un('pointermove', handlePointerMove);\n//             map.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default MapComponent;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n// import Legend from './Legend';\n// import '../styles/MapComponent.css'; // Make sure to import the CSS file for button styles\n\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n//     const [showDensity, setShowDensity] = useState<boolean>(true);\n//     const [map, setMap] = useState<Map | null>(null);\n//     const [vectorLayer, setVectorLayer] = useState<VectorLayer<any> | null>(null);\n\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n\n//         const newVectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: (feature) => {\n//                 const density = feature.get('density');\n//                 let fillColor = 'rgba(0, 0, 255, 0.1)';\n//                 if (density > 1000) fillColor = 'rgba(128, 0, 38, 0.85)';\n//                 else if (density > 750) fillColor = 'rgba(189, 0, 38, 0.8)';\n//                 else if (density > 500) fillColor = 'rgba(227, 26, 28, 0.8)';\n//                 else if (density > 250) fillColor = 'rgba(252, 78, 42, 0.8)';\n//                 else if (density > 100) fillColor = 'rgba(253, 141, 60, 0.8)';\n//                 else if (density > 50) fillColor = 'rgba(254, 178, 76, 0.8)';\n//                 else if (density > 25) fillColor = 'rgba(254, 217, 118, 0.8)';\n//                 else if (density > 0) fillColor = 'rgba(255, 237, 160, 0.8)';\n//                 return new Style({\n//                     fill: new Fill({\n//                         color: fillColor,\n//                     }),\n//                     stroke: new Stroke({\n//                         color: '#319FD3',\n//                         width: 1,\n//                     }),\n//                 });\n//             },\n//         });\n\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n\n//         const newMap = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 newVectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4.75,\n//             }),\n//             overlays: [overlay],\n//         });\n\n//         const handlePointerMove = (event: any) => {\n//             newMap.getTargetElement().style.cursor = newMap.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = newMap.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 const density = feature.get('density');\n//                 setPopupContent(`State: ${name}, Density: ${density}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n\n//         newMap.on('pointermove', handlePointerMove);\n\n//         setMap(newMap);\n//         setVectorLayer(newVectorLayer);\n\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             newMap.un('pointermove', handlePointerMove);\n//             newMap.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n\n//     const toggleDensityLayer = () => {\n//         if (vectorLayer) {\n//             vectorLayer.setOpacity(showDensity ? 0 : 0.8);\n//             setShowDensity(!showDensity);\n//         }\n//     };\n\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//             <div className=\"legend-container\" style={{ position: 'absolute', bottom: '10px', left: '10px' }}>\n//                 <button className=\"toggle-button\" onClick={toggleDensityLayer} style={{ marginBottom: '10px' }}>\n//                     {showDensity ? 'Hide' : 'Show'} Density\n//                 </button>\n//                 <Legend />\n//             </div>\n//         </>\n//     );\n// };\n\n// export default MapComponent;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZ from 'ol/source/XYZ';\nimport { fromLonLat } from 'ol/proj';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport { Style, Fill, Stroke } from 'ol/style';\nimport { GeoJSON } from 'ol/format';\nimport Overlay from 'ol/Overlay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst densityRanges = [{\n  range: '0-25',\n  color: '#FFEDA0'\n}, {\n  range: '25-50',\n  color: '#FED976'\n}, {\n  range: '50-100',\n  color: '#FEB24C'\n}, {\n  range: '100-250',\n  color: '#FD8D3C'\n}, {\n  range: '250-500',\n  color: '#FC4E2A'\n}, {\n  range: '500-750',\n  color: '#E31A1C'\n}, {\n  range: '750-1000',\n  color: '#BD0026'\n}, {\n  range: '1000+',\n  color: '#800026'\n}];\nconst getDensity = feature => {\n  const density = feature.get('density');\n  return density !== undefined ? density : 0;\n};\nconst MapComponent = () => {\n  _s();\n  const mapElement = useRef(null);\n  const popupElement = useRef(null);\n  const [popupContent, setPopupContent] = useState('');\n  const [popupPosition, setPopupPosition] = useState([]);\n  const [showDensity, setShowDensity] = useState(true);\n  const [selectedRange, setSelectedRange] = useState(null);\n  useEffect(() => {\n    if (!mapElement.current || !popupElement.current) return;\n    const vectorSource = new VectorSource({\n      url: 'https://openlayers.org/data/vector/us-states.json',\n      format: new GeoJSON()\n    });\n    const getColor = density => {\n      var _densityRanges$find3;\n      if (selectedRange) {\n        const [min, max] = selectedRange.split('-').map(Number);\n        if (max) {\n          if (density >= min && density < max) {\n            var _densityRanges$find;\n            return ((_densityRanges$find = densityRanges.find(range => range.range === selectedRange)) === null || _densityRanges$find === void 0 ? void 0 : _densityRanges$find.color) || 'rgba(0, 0, 255, 0.1)';\n          }\n        } else {\n          if (density >= min) {\n            var _densityRanges$find2;\n            return ((_densityRanges$find2 = densityRanges.find(range => range.range === selectedRange)) === null || _densityRanges$find2 === void 0 ? void 0 : _densityRanges$find2.color) || 'rgba(0, 0, 255, 0.1)';\n          }\n        }\n        return 'rgba(0, 0, 255, 0.1)'; // Color for states not in the selected range\n      }\n      return ((_densityRanges$find3 = densityRanges.find(range => range.range === getRange(density))) === null || _densityRanges$find3 === void 0 ? void 0 : _densityRanges$find3.color) || 'rgba(0, 0, 255, 0.1)';\n    };\n    const getRange = density => {\n      for (const range of densityRanges) {\n        const [min, max] = range.range.split('-').map(Number);\n        if (max) {\n          if (density >= min && density < max) {\n            return range.range;\n          }\n        } else {\n          if (density >= min) {\n            return range.range;\n          }\n        }\n      }\n      return '0-25';\n    };\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: feature => {\n        const density = getDensity(feature);\n        const color = showDensity ? getColor(density) : 'rgba(0, 0, 255, 0.1)';\n        return new Style({\n          fill: new Fill({\n            color: color\n          }),\n          stroke: new Stroke({\n            color: '#319FD3',\n            width: 1\n          })\n        });\n      }\n    });\n    const overlay = new Overlay({\n      element: popupElement.current,\n      autoPan: {\n        animation: {\n          duration: 250\n        }\n      }\n    });\n    const map = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        })\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.7129, 37.0902]),\n        // Centered on the USA\n        zoom: 4.4 // Increase zoom level by 10%\n      }),\n      overlays: [overlay]\n    });\n    const handlePointerMove = event => {\n      map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n      const feature = map.getFeaturesAtPixel(event.pixel)[0];\n      if (feature) {\n        const coordinates = event.coordinate;\n        const name = feature.get('name');\n        const density = getDensity(feature);\n        setPopupContent(`State: ${name}, Density: ${density}`);\n        setPopupPosition(coordinates);\n        overlay.setPosition(coordinates);\n      } else {\n        overlay.setPosition(undefined);\n      }\n    };\n    map.on('pointermove', handlePointerMove);\n\n    // Cleanup function to properly remove the map and overlay\n    return () => {\n      map.un('pointermove', handlePointerMove);\n      map.setTarget(undefined);\n      overlay.setElement(undefined);\n    };\n  }, [showDensity, selectedRange]);\n  const toggleDensity = () => {\n    setShowDensity(!showDensity);\n  };\n  const handleRangeClick = range => {\n    setSelectedRange(range === selectedRange ? null : range);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: popupElement,\n      id: \"popup\",\n      className: \"ol-popup\",\n      style: {\n        position: 'absolute',\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '5px',\n        border: '1px solid black',\n        whiteSpace: 'nowrap',\n        transform: 'translateY(10px)',\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: popupContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDensity,\n      style: {\n        position: 'absolute',\n        top: '50px',\n        left: '10px',\n        padding: '10px',\n        fontSize: '16px',\n        zIndex: 1000\n      },\n      children: showDensity ? 'Hide Density' : 'Show Density'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend\",\n      style: {\n        position: 'absolute',\n        bottom: '10px',\n        left: '10px',\n        background: 'white',\n        boxShadow: '0 0 15px rgba(0, 0, 0, 0.2)',\n        padding: '10px',\n        zIndex: 1000,\n        maxHeight: '40%',\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Population Density\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this), densityRanges.map(({\n        range,\n        color\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          marginBottom: '5px',\n          cursor: 'pointer'\n        },\n        onClick: () => handleRangeClick(range),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            display: 'inline-block',\n            width: '18px',\n            height: '18px',\n            marginRight: '8px',\n            background: color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: selectedRange === range ? 'underline' : 'none'\n          },\n          children: range\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 25\n        }, this)]\n      }, range, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MapComponent, \"juSuYnnBYu5p4N5OsOLjZ92de0Y=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","XYZ","fromLonLat","VectorLayer","VectorSource","Style","Fill","Stroke","GeoJSON","Overlay","jsxDEV","_jsxDEV","Fragment","_Fragment","densityRanges","range","color","getDensity","feature","density","get","undefined","MapComponent","_s","mapElement","popupElement","popupContent","setPopupContent","popupPosition","setPopupPosition","showDensity","setShowDensity","selectedRange","setSelectedRange","current","vectorSource","url","format","getColor","_densityRanges$find3","min","max","split","map","Number","_densityRanges$find","find","_densityRanges$find2","getRange","vectorLayer","source","style","fill","stroke","width","overlay","element","autoPan","animation","duration","target","layers","view","center","zoom","overlays","handlePointerMove","event","getTargetElement","cursor","hasFeatureAtPixel","pixel","getFeaturesAtPixel","coordinates","coordinate","name","setPosition","on","un","setTarget","setElement","toggleDensity","handleRangeClick","children","ref","height","fileName","_jsxFileName","lineNumber","columnNumber","id","className","position","backgroundColor","padding","borderRadius","border","whiteSpace","transform","zIndex","onClick","top","left","fontSize","bottom","background","boxShadow","maxHeight","overflowY","display","alignItems","marginBottom","marginRight","textDecoration","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/population-density-map/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: new Style({\r\n//                 fill: new Fill({\r\n//                     color: 'rgba(0, 0, 255, 0.1)',\r\n//                 }),\r\n//                 stroke: new Stroke({\r\n//                     color: '#319FD3',\r\n//                     width: 1,\r\n//                 }),\r\n//             }),\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const map = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 vectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 setPopupContent(`State: ${name}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         map.on('pointermove', handlePointerMove);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             map.un('pointermove', handlePointerMove);\r\n//             map.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n// import Legend from './Legend';\r\n// import '../styles/MapComponent.css'; // Make sure to import the CSS file for button styles\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n//     const [showDensity, setShowDensity] = useState<boolean>(true);\r\n//     const [map, setMap] = useState<Map | null>(null);\r\n//     const [vectorLayer, setVectorLayer] = useState<VectorLayer<any> | null>(null);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const newVectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: (feature) => {\r\n//                 const density = feature.get('density');\r\n//                 let fillColor = 'rgba(0, 0, 255, 0.1)';\r\n//                 if (density > 1000) fillColor = 'rgba(128, 0, 38, 0.85)';\r\n//                 else if (density > 750) fillColor = 'rgba(189, 0, 38, 0.8)';\r\n//                 else if (density > 500) fillColor = 'rgba(227, 26, 28, 0.8)';\r\n//                 else if (density > 250) fillColor = 'rgba(252, 78, 42, 0.8)';\r\n//                 else if (density > 100) fillColor = 'rgba(253, 141, 60, 0.8)';\r\n//                 else if (density > 50) fillColor = 'rgba(254, 178, 76, 0.8)';\r\n//                 else if (density > 25) fillColor = 'rgba(254, 217, 118, 0.8)';\r\n//                 else if (density > 0) fillColor = 'rgba(255, 237, 160, 0.8)';\r\n//                 return new Style({\r\n//                     fill: new Fill({\r\n//                         color: fillColor,\r\n//                     }),\r\n//                     stroke: new Stroke({\r\n//                         color: '#319FD3',\r\n//                         width: 1,\r\n//                     }),\r\n//                 });\r\n//             },\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const newMap = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 newVectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4.75,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             newMap.getTargetElement().style.cursor = newMap.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = newMap.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 const density = feature.get('density');\r\n//                 setPopupContent(`State: ${name}, Density: ${density}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         newMap.on('pointermove', handlePointerMove);\r\n\r\n//         setMap(newMap);\r\n//         setVectorLayer(newVectorLayer);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             newMap.un('pointermove', handlePointerMove);\r\n//             newMap.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     const toggleDensityLayer = () => {\r\n//         if (vectorLayer) {\r\n//             vectorLayer.setOpacity(showDensity ? 0 : 0.8);\r\n//             setShowDensity(!showDensity);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//             <div className=\"legend-container\" style={{ position: 'absolute', bottom: '10px', left: '10px' }}>\r\n//                 <button className=\"toggle-button\" onClick={toggleDensityLayer} style={{ marginBottom: '10px' }}>\r\n//                     {showDensity ? 'Hide' : 'Show'} Density\r\n//                 </button>\r\n//                 <Legend />\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Fill, Stroke } from 'ol/style';\r\nimport { GeoJSON } from 'ol/format';\r\nimport Overlay from 'ol/Overlay';\r\n\r\nconst densityRanges = [\r\n    { range: '0-25', color: '#FFEDA0' },\r\n    { range: '25-50', color: '#FED976' },\r\n    { range: '50-100', color: '#FEB24C' },\r\n    { range: '100-250', color: '#FD8D3C' },\r\n    { range: '250-500', color: '#FC4E2A' },\r\n    { range: '500-750', color: '#E31A1C' },\r\n    { range: '750-1000', color: '#BD0026' },\r\n    { range: '1000+', color: '#800026' },\r\n];\r\n\r\nconst getDensity = (feature: any) => {\r\n    const density = feature.get('density');\r\n    return density !== undefined ? density : 0;\r\n};\r\n\r\nconst MapComponent: React.FC = () => {\r\n    const mapElement = useRef<HTMLDivElement | null>(null);\r\n    const popupElement = useRef<HTMLDivElement | null>(null);\r\n    const [popupContent, setPopupContent] = useState<string>('');\r\n    const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n    const [showDensity, setShowDensity] = useState<boolean>(true);\r\n    const [selectedRange, setSelectedRange] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!mapElement.current || !popupElement.current) return;\r\n\r\n        const vectorSource = new VectorSource({\r\n            url: 'https://openlayers.org/data/vector/us-states.json',\r\n            format: new GeoJSON(),\r\n        });\r\n\r\n        const getColor = (density: number) => {\r\n            if (selectedRange) {\r\n                const [min, max] = selectedRange.split('-').map(Number);\r\n                if (max) {\r\n                    if (density >= min && density < max) {\r\n                        return densityRanges.find(range => range.range === selectedRange)?.color || 'rgba(0, 0, 255, 0.1)';\r\n                    }\r\n                } else {\r\n                    if (density >= min) {\r\n                        return densityRanges.find(range => range.range === selectedRange)?.color || 'rgba(0, 0, 255, 0.1)';\r\n                    }\r\n                }\r\n                return 'rgba(0, 0, 255, 0.1)'; // Color for states not in the selected range\r\n            }\r\n            return densityRanges.find(range => range.range === getRange(density))?.color || 'rgba(0, 0, 255, 0.1)';\r\n        };\r\n\r\n        const getRange = (density: number) => {\r\n            for (const range of densityRanges) {\r\n                const [min, max] = range.range.split('-').map(Number);\r\n                if (max) {\r\n                    if (density >= min && density < max) {\r\n                        return range.range;\r\n                    }\r\n                } else {\r\n                    if (density >= min) {\r\n                        return range.range;\r\n                    }\r\n                }\r\n            }\r\n            return '0-25';\r\n        };\r\n\r\n        const vectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            style: (feature) => {\r\n                const density = getDensity(feature);\r\n                const color = showDensity ? getColor(density) : 'rgba(0, 0, 255, 0.1)';\r\n                return new Style({\r\n                    fill: new Fill({\r\n                        color: color,\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        color: '#319FD3',\r\n                        width: 1,\r\n                    }),\r\n                });\r\n            },\r\n        });\r\n\r\n        const overlay = new Overlay({\r\n            element: popupElement.current!,\r\n            autoPan: {\r\n                animation: {\r\n                    duration: 250,\r\n                },\r\n            },\r\n        });\r\n\r\n        const map = new Map({\r\n            target: mapElement.current!,\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                    }),\r\n                }),\r\n                vectorLayer,\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n                zoom: 4.4, // Increase zoom level by 10%\r\n            }),\r\n            overlays: [overlay],\r\n        });\r\n\r\n        const handlePointerMove = (event: any) => {\r\n            map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n            const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n            if (feature) {\r\n                const coordinates = event.coordinate;\r\n                const name = feature.get('name');\r\n                const density = getDensity(feature);\r\n                setPopupContent(`State: ${name}, Density: ${density}`);\r\n                setPopupPosition(coordinates);\r\n                overlay.setPosition(coordinates);\r\n            } else {\r\n                overlay.setPosition(undefined);\r\n            }\r\n        };\r\n\r\n        map.on('pointermove', handlePointerMove);\r\n\r\n        // Cleanup function to properly remove the map and overlay\r\n        return () => {\r\n            map.un('pointermove', handlePointerMove);\r\n            map.setTarget(undefined);\r\n            overlay.setElement(undefined);\r\n        };\r\n    }, [showDensity, selectedRange]);\r\n\r\n    const toggleDensity = () => {\r\n        setShowDensity(!showDensity);\r\n    };\r\n\r\n    const handleRangeClick = (range: string) => {\r\n        setSelectedRange(range === selectedRange ? null : range);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n            <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)', zIndex: 1000 }}>\r\n                <div>{popupContent}</div>\r\n            </div>\r\n            <button onClick={toggleDensity} style={{ position: 'absolute', top: '50px', left: '10px', padding: '10px', fontSize: '16px', zIndex: 1000 }}>\r\n                {showDensity ? 'Hide Density' : 'Show Density'}\r\n            </button>\r\n            <div className=\"legend\" style={{ position: 'absolute', bottom: '10px', left: '10px', background: 'white', boxShadow: '0 0 15px rgba(0, 0, 0, 0.2)', padding: '10px', zIndex: 1000, maxHeight: '40%', overflowY: 'auto' }}>\r\n                <h4>Population Density</h4>\r\n                {densityRanges.map(({ range, color }) => (\r\n                    <div key={range} style={{ display: 'flex', alignItems: 'center', marginBottom: '5px', cursor: 'pointer' }} onClick={() => handleRangeClick(range)}>\r\n                        <span style={{ display: 'inline-block', width: '18px', height: '18px', marginRight: '8px', background: color }}></span>\r\n                        <span style={{ textDecoration: selectedRange === range ? 'underline' : 'none' }}>{range}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,SAASC,GAAG,EAAEC,IAAI,QAAQ,IAAI;AAC9B,OAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}