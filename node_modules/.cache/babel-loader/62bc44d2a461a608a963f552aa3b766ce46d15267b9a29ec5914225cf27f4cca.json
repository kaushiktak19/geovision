{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n//         const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: new Style({\n//                 fill: new Fill({\n//                     color: 'rgba(0, 0, 255, 0.1)',\n//                 }),\n//                 stroke: new Stroke({\n//                     color: '#319FD3',\n//                     width: 1,\n//                 }),\n//             }),\n//         });\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n//         const map = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 vectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4,\n//             }),\n//             overlays: [overlay],\n//         });\n//         const handlePointerMove = (event: any) => {\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 setPopupContent(`State: ${name}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n//         map.on('pointermove', handlePointerMove);\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             map.un('pointermove', handlePointerMove);\n//             map.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//         </>\n//     );\n// };\n// export default MapComponent;\nimport React,{useEffect,useRef,useState}from'react';import'ol/ol.css';import{Map,View}from'ol';import TileLayer from'ol/layer/Tile';import XYZ from'ol/source/XYZ';import{fromLonLat}from'ol/proj';import VectorLayer from'ol/layer/Vector';import VectorSource from'ol/source/Vector';import{Style,Fill,Stroke}from'ol/style';import{GeoJSON}from'ol/format';import Overlay from'ol/Overlay';import Legend from'./Legend';import'../styles/MapComponent.css';// Make sure to import the CSS file for button styles\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const MapComponent=()=>{const mapElement=useRef(null);const popupElement=useRef(null);// Create a ref for the popup element\nconst[popupContent,setPopupContent]=useState('');const[popupPosition,setPopupPosition]=useState([]);const[showDensity,setShowDensity]=useState(true);const[map,setMap]=useState(null);const[vectorLayer,setVectorLayer]=useState(null);useEffect(()=>{if(!mapElement.current||!popupElement.current)return;const vectorSource=new VectorSource({url:'https://openlayers.org/data/vector/us-states.json',format:new GeoJSON()});const newVectorLayer=new VectorLayer({source:vectorSource,style:feature=>{const density=feature.get('density');let fillColor='rgba(0, 0, 255, 0.1)';if(density>1000)fillColor='rgba(128, 0, 38, 0.85)';else if(density>750)fillColor='rgba(189, 0, 38, 0.8)';else if(density>500)fillColor='rgba(227, 26, 28, 0.8)';else if(density>250)fillColor='rgba(252, 78, 42, 0.8)';else if(density>100)fillColor='rgba(253, 141, 60, 0.8)';else if(density>50)fillColor='rgba(254, 178, 76, 0.8)';else if(density>25)fillColor='rgba(254, 217, 118, 0.8)';else if(density>0)fillColor='rgba(255, 237, 160, 0.8)';return new Style({fill:new Fill({color:fillColor}),stroke:new Stroke({color:'#319FD3',width:1})});}});const overlay=new Overlay({element:popupElement.current,autoPan:{animation:{duration:250}}});const newMap=new Map({target:mapElement.current,layers:[new TileLayer({source:new XYZ({url:'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'})}),newVectorLayer],view:new View({center:fromLonLat([-95.7129,37.0902]),// Centered on the USA\nzoom:4.75}),overlays:[overlay]});const handlePointerMove=event=>{newMap.getTargetElement().style.cursor=newMap.hasFeatureAtPixel(event.pixel)?'pointer':'';const feature=newMap.getFeaturesAtPixel(event.pixel)[0];if(feature){const coordinates=event.coordinate;const name=feature.get('name');const density=feature.get('density');setPopupContent(\"State: \".concat(name,\", Density: \").concat(density));setPopupPosition(coordinates);overlay.setPosition(coordinates);}else{overlay.setPosition(undefined);}};newMap.on('pointermove',handlePointerMove);setMap(newMap);setVectorLayer(newVectorLayer);// Cleanup function to properly remove the map and overlay\nreturn()=>{newMap.un('pointermove',handlePointerMove);newMap.setTarget(undefined);overlay.setElement(undefined);};},[]);const toggleDensityLayer=()=>{if(vectorLayer){vectorLayer.setOpacity(showDensity?0:0.8);setShowDensity(!showDensity);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{ref:mapElement,style:{width:'100%',height:'100vh'}}),/*#__PURE__*/_jsx(\"div\",{ref:popupElement,id:\"popup\",className:\"ol-popup\",style:{position:'absolute',backgroundColor:'rgba(255, 255, 255, 0.8)',padding:'5px',borderRadius:'5px',border:'1px solid black',whiteSpace:'nowrap',transform:'translateY(10px)'},children:/*#__PURE__*/_jsx(\"div\",{children:popupContent})}),/*#__PURE__*/_jsxs(\"div\",{className:\"legend-container\",style:{position:'absolute',bottom:'10px',left:'10px'},children:[/*#__PURE__*/_jsxs(\"button\",{className:\"toggle-button\",onClick:toggleDensityLayer,style:{marginBottom:'10px'},children:[showDensity?'Hide':'Show',\" Density\"]}),/*#__PURE__*/_jsx(Legend,{})]})]});};export default MapComponent;","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","XYZ","fromLonLat","VectorLayer","VectorSource","Style","Fill","Stroke","GeoJSON","Overlay","Legend","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","MapComponent","mapElement","popupElement","popupContent","setPopupContent","popupPosition","setPopupPosition","showDensity","setShowDensity","map","setMap","vectorLayer","setVectorLayer","current","vectorSource","url","format","newVectorLayer","source","style","feature","density","get","fillColor","fill","color","stroke","width","overlay","element","autoPan","animation","duration","newMap","target","layers","view","center","zoom","overlays","handlePointerMove","event","getTargetElement","cursor","hasFeatureAtPixel","pixel","getFeaturesAtPixel","coordinates","coordinate","name","concat","setPosition","undefined","on","un","setTarget","setElement","toggleDensityLayer","setOpacity","children","ref","height","id","className","position","backgroundColor","padding","borderRadius","border","whiteSpace","transform","bottom","left","onClick","marginBottom"],"sources":["C:/Users/Asus/Desktop/population-density-map/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: new Style({\r\n//                 fill: new Fill({\r\n//                     color: 'rgba(0, 0, 255, 0.1)',\r\n//                 }),\r\n//                 stroke: new Stroke({\r\n//                     color: '#319FD3',\r\n//                     width: 1,\r\n//                 }),\r\n//             }),\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const map = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 vectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 setPopupContent(`State: ${name}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         map.on('pointermove', handlePointerMove);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             map.un('pointermove', handlePointerMove);\r\n//             map.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Fill, Stroke } from 'ol/style';\r\nimport { GeoJSON } from 'ol/format';\r\nimport Overlay from 'ol/Overlay';\r\nimport Legend from './Legend';\r\nimport '../styles/MapComponent.css'; // Make sure to import the CSS file for button styles\r\n\r\nconst MapComponent: React.FC = () => {\r\n    const mapElement = useRef<HTMLDivElement | null>(null);\r\n    const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n    const [popupContent, setPopupContent] = useState<string>('');\r\n    const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n    const [showDensity, setShowDensity] = useState<boolean>(true);\r\n    const [map, setMap] = useState<Map | null>(null);\r\n    const [vectorLayer, setVectorLayer] = useState<VectorLayer<any> | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!mapElement.current || !popupElement.current) return;\r\n\r\n        const vectorSource = new VectorSource({\r\n            url: 'https://openlayers.org/data/vector/us-states.json',\r\n            format: new GeoJSON(),\r\n        });\r\n\r\n        const newVectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            style: (feature) => {\r\n                const density = feature.get('density');\r\n                let fillColor = 'rgba(0, 0, 255, 0.1)';\r\n                if (density > 1000) fillColor = 'rgba(128, 0, 38, 0.85)';\r\n                else if (density > 750) fillColor = 'rgba(189, 0, 38, 0.8)';\r\n                else if (density > 500) fillColor = 'rgba(227, 26, 28, 0.8)';\r\n                else if (density > 250) fillColor = 'rgba(252, 78, 42, 0.8)';\r\n                else if (density > 100) fillColor = 'rgba(253, 141, 60, 0.8)';\r\n                else if (density > 50) fillColor = 'rgba(254, 178, 76, 0.8)';\r\n                else if (density > 25) fillColor = 'rgba(254, 217, 118, 0.8)';\r\n                else if (density > 0) fillColor = 'rgba(255, 237, 160, 0.8)';\r\n                return new Style({\r\n                    fill: new Fill({\r\n                        color: fillColor,\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        color: '#319FD3',\r\n                        width: 1,\r\n                    }),\r\n                });\r\n            },\r\n        });\r\n\r\n        const overlay = new Overlay({\r\n            element: popupElement.current!,\r\n            autoPan: {\r\n                animation: {\r\n                    duration: 250,\r\n                },\r\n            },\r\n        });\r\n\r\n        const newMap = new Map({\r\n            target: mapElement.current!,\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                    }),\r\n                }),\r\n                newVectorLayer,\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n                zoom: 4.75,\r\n            }),\r\n            overlays: [overlay],\r\n        });\r\n\r\n        const handlePointerMove = (event: any) => {\r\n            newMap.getTargetElement().style.cursor = newMap.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n            const feature = newMap.getFeaturesAtPixel(event.pixel)[0];\r\n            if (feature) {\r\n                const coordinates = event.coordinate;\r\n                const name = feature.get('name');\r\n                const density = feature.get('density');\r\n                setPopupContent(`State: ${name}, Density: ${density}`);\r\n                setPopupPosition(coordinates);\r\n                overlay.setPosition(coordinates);\r\n            } else {\r\n                overlay.setPosition(undefined);\r\n            }\r\n        };\r\n\r\n        newMap.on('pointermove', handlePointerMove);\r\n\r\n        setMap(newMap);\r\n        setVectorLayer(newVectorLayer);\r\n\r\n        // Cleanup function to properly remove the map and overlay\r\n        return () => {\r\n            newMap.un('pointermove', handlePointerMove);\r\n            newMap.setTarget(undefined);\r\n            overlay.setElement(undefined);\r\n        };\r\n    }, []);\r\n\r\n    const toggleDensityLayer = () => {\r\n        if (vectorLayer) {\r\n            vectorLayer.setOpacity(showDensity ? 0 : 0.8);\r\n            setShowDensity(!showDensity);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n            <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n                <div>{popupContent}</div>\r\n            </div>\r\n            <div className=\"legend-container\" style={{ position: 'absolute', bottom: '10px', left: '10px' }}>\r\n                <button className=\"toggle-button\" onClick={toggleDensityLayer} style={{ marginBottom: '10px' }}>\r\n                    {showDensity ? 'Hide' : 'Show'} Density\r\n                </button>\r\n                <Legend />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}