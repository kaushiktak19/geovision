{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\population-density-map\\\\src\\\\components\\\\MapComponent.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import 'ol/ol.css';\n// import { Map, View } from 'ol';\n// import TileLayer from 'ol/layer/Tile';\n// import XYZ from 'ol/source/XYZ';\n// import { fromLonLat } from 'ol/proj';\n// import VectorLayer from 'ol/layer/Vector';\n// import VectorSource from 'ol/source/Vector';\n// import { Style, Fill, Stroke } from 'ol/style';\n// import { GeoJSON } from 'ol/format';\n// import Overlay from 'ol/Overlay';\n\n// const MapComponent: React.FC = () => {\n//     const mapElement = useRef<HTMLDivElement | null>(null);\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\n//     const [popupContent, setPopupContent] = useState<string>('');\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\n\n//     useEffect(() => {\n//         if (!mapElement.current || !popupElement.current) return;\n\n//         const vectorSource = new VectorSource({\n//             url: 'https://openlayers.org/data/vector/us-states.json',\n//             format: new GeoJSON(),\n//         });\n\n//         const vectorLayer = new VectorLayer({\n//             source: vectorSource,\n//             style: new Style({\n//                 fill: new Fill({\n//                     color: 'rgba(0, 0, 255, 0.1)',\n//                 }),\n//                 stroke: new Stroke({\n//                     color: '#319FD3',\n//                     width: 1,\n//                 }),\n//             }),\n//         });\n\n//         const overlay = new Overlay({\n//             element: popupElement.current!,\n//             autoPan: {\n//                 animation: {\n//                     duration: 250,\n//                 },\n//             },\n//         });\n\n//         const map = new Map({\n//             target: mapElement.current!,\n//             layers: [\n//                 new TileLayer({\n//                     source: new XYZ({\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n//                     }),\n//                 }),\n//                 vectorLayer,\n//             ],\n//             view: new View({\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\n//                 zoom: 4,\n//             }),\n//             overlays: [overlay],\n//         });\n\n//         const handlePointerMove = (event: any) => {\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\n//             if (feature) {\n//                 const coordinates = event.coordinate;\n//                 const name = feature.get('name');\n//                 setPopupContent(`State: ${name}`);\n//                 setPopupPosition(coordinates);\n//                 overlay.setPosition(coordinates);\n//             } else {\n//                 overlay.setPosition(undefined);\n//             }\n//         };\n\n//         map.on('pointermove', handlePointerMove);\n\n//         // Cleanup function to properly remove the map and overlay\n//         return () => {\n//             map.un('pointermove', handlePointerMove);\n//             map.setTarget(undefined);\n//             overlay.setElement(undefined);\n//         };\n//     }, []);\n\n//     return (\n//         <>\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\n//                 <div>{popupContent}</div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default MapComponent;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZ from 'ol/source/XYZ';\nimport { fromLonLat } from 'ol/proj';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport { Style, Fill, Stroke } from 'ol/style';\nimport { GeoJSON } from 'ol/format';\nimport Overlay from 'ol/Overlay';\nimport Legend from './Legend';\nimport '../styles/MapComponent.css'; // Make sure to import the CSS file for button styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const mapElement = useRef(null);\n  const popupElement = useRef(null); // Create a ref for the popup element\n  const [popupContent, setPopupContent] = useState('');\n  const [popupPosition, setPopupPosition] = useState([]);\n  const [showDensity, setShowDensity] = useState(true);\n  const [map, setMap] = useState(null);\n  const [vectorLayer, setVectorLayer] = useState(null);\n  useEffect(() => {\n    if (!mapElement.current || !popupElement.current) return;\n    const vectorSource = new VectorSource({\n      url: 'https://openlayers.org/data/vector/us-states.json',\n      format: new GeoJSON()\n    });\n    const newVectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: feature => {\n        const density = feature.get('density');\n        let fillColor = 'rgba(0, 0, 255, 0.1)';\n        if (density > 1000) fillColor = 'rgba(128, 0, 38, 0.8)';else if (density > 750) fillColor = 'rgba(189, 0, 38, 0.8)';else if (density > 500) fillColor = 'rgba(227, 26, 28, 0.8)';else if (density > 250) fillColor = 'rgba(252, 78, 42, 0.8)';else if (density > 100) fillColor = 'rgba(253, 141, 60, 0.8)';else if (density > 50) fillColor = 'rgba(254, 178, 76, 0.8)';else if (density > 25) fillColor = 'rgba(254, 217, 118, 0.8)';else if (density > 0) fillColor = 'rgba(255, 237, 160, 0.8)';\n        return new Style({\n          fill: new Fill({\n            color: fillColor\n          }),\n          stroke: new Stroke({\n            color: '#319FD3',\n            width: 1\n          })\n        });\n      }\n    });\n    const overlay = new Overlay({\n      element: popupElement.current,\n      autoPan: {\n        animation: {\n          duration: 250\n        }\n      }\n    });\n    const newMap = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        })\n      }), newVectorLayer],\n      view: new View({\n        center: fromLonLat([-95.7129, 37.0902]),\n        // Centered on the USA\n        zoom: 4\n      }),\n      overlays: [overlay]\n    });\n    const handlePointerMove = event => {\n      newMap.getTargetElement().style.cursor = newMap.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\n      const feature = newMap.getFeaturesAtPixel(event.pixel)[0];\n      if (feature) {\n        const coordinates = event.coordinate;\n        const name = feature.get('name');\n        const density = feature.get('density');\n        setPopupContent(`State: ${name}, Density: ${density}`);\n        setPopupPosition(coordinates);\n        overlay.setPosition(coordinates);\n      } else {\n        overlay.setPosition(undefined);\n      }\n    };\n    newMap.on('pointermove', handlePointerMove);\n    setMap(newMap);\n    setVectorLayer(newVectorLayer);\n\n    // Cleanup function to properly remove the map and overlay\n    return () => {\n      newMap.un('pointermove', handlePointerMove);\n      newMap.setTarget(undefined);\n      overlay.setElement(undefined);\n    };\n  }, []);\n  const toggleDensityLayer = () => {\n    if (vectorLayer) {\n      vectorLayer.setOpacity(showDensity ? 0 : 0.8);\n      setShowDensity(!showDensity);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        width: '100%',\n        height: '100vh',\n        padding: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: popupElement,\n      id: \"popup\",\n      className: \"ol-popup\",\n      style: {\n        position: 'absolute',\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n        padding: '5px',\n        borderRadius: '5px',\n        border: '1px solid black',\n        whiteSpace: 'nowrap',\n        transform: 'translateY(10px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: popupContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-button\",\n        onClick: toggleDensityLayer,\n        children: [showDensity ? 'Hide' : 'Show', \" Density\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MapComponent, \"wht4GPWkSTWTqSeRSTHOgcWBArA=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","XYZ","fromLonLat","VectorLayer","VectorSource","Style","Fill","Stroke","GeoJSON","Overlay","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","MapComponent","_s","mapElement","popupElement","popupContent","setPopupContent","popupPosition","setPopupPosition","showDensity","setShowDensity","map","setMap","vectorLayer","setVectorLayer","current","vectorSource","url","format","newVectorLayer","source","style","feature","density","get","fillColor","fill","color","stroke","width","overlay","element","autoPan","animation","duration","newMap","target","layers","view","center","zoom","overlays","handlePointerMove","event","getTargetElement","cursor","hasFeatureAtPixel","pixel","getFeaturesAtPixel","coordinates","coordinate","name","setPosition","undefined","on","un","setTarget","setElement","toggleDensityLayer","setOpacity","children","ref","height","padding","fileName","_jsxFileName","lineNumber","columnNumber","id","className","position","backgroundColor","borderRadius","border","whiteSpace","transform","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/population-density-map/src/components/MapComponent.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import 'ol/ol.css';\r\n// import { Map, View } from 'ol';\r\n// import TileLayer from 'ol/layer/Tile';\r\n// import XYZ from 'ol/source/XYZ';\r\n// import { fromLonLat } from 'ol/proj';\r\n// import VectorLayer from 'ol/layer/Vector';\r\n// import VectorSource from 'ol/source/Vector';\r\n// import { Style, Fill, Stroke } from 'ol/style';\r\n// import { GeoJSON } from 'ol/format';\r\n// import Overlay from 'ol/Overlay';\r\n\r\n// const MapComponent: React.FC = () => {\r\n//     const mapElement = useRef<HTMLDivElement | null>(null);\r\n//     const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n//     const [popupContent, setPopupContent] = useState<string>('');\r\n//     const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n\r\n//     useEffect(() => {\r\n//         if (!mapElement.current || !popupElement.current) return;\r\n\r\n//         const vectorSource = new VectorSource({\r\n//             url: 'https://openlayers.org/data/vector/us-states.json',\r\n//             format: new GeoJSON(),\r\n//         });\r\n\r\n//         const vectorLayer = new VectorLayer({\r\n//             source: vectorSource,\r\n//             style: new Style({\r\n//                 fill: new Fill({\r\n//                     color: 'rgba(0, 0, 255, 0.1)',\r\n//                 }),\r\n//                 stroke: new Stroke({\r\n//                     color: '#319FD3',\r\n//                     width: 1,\r\n//                 }),\r\n//             }),\r\n//         });\r\n\r\n//         const overlay = new Overlay({\r\n//             element: popupElement.current!,\r\n//             autoPan: {\r\n//                 animation: {\r\n//                     duration: 250,\r\n//                 },\r\n//             },\r\n//         });\r\n\r\n//         const map = new Map({\r\n//             target: mapElement.current!,\r\n//             layers: [\r\n//                 new TileLayer({\r\n//                     source: new XYZ({\r\n//                         url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n//                     }),\r\n//                 }),\r\n//                 vectorLayer,\r\n//             ],\r\n//             view: new View({\r\n//                 center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n//                 zoom: 4,\r\n//             }),\r\n//             overlays: [overlay],\r\n//         });\r\n\r\n//         const handlePointerMove = (event: any) => {\r\n//             map.getTargetElement().style.cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n//             const feature = map.getFeaturesAtPixel(event.pixel)[0];\r\n//             if (feature) {\r\n//                 const coordinates = event.coordinate;\r\n//                 const name = feature.get('name');\r\n//                 setPopupContent(`State: ${name}`);\r\n//                 setPopupPosition(coordinates);\r\n//                 overlay.setPosition(coordinates);\r\n//             } else {\r\n//                 overlay.setPosition(undefined);\r\n//             }\r\n//         };\r\n\r\n//         map.on('pointermove', handlePointerMove);\r\n\r\n//         // Cleanup function to properly remove the map and overlay\r\n//         return () => {\r\n//             map.un('pointermove', handlePointerMove);\r\n//             map.setTarget(undefined);\r\n//             overlay.setElement(undefined);\r\n//         };\r\n//     }, []);\r\n\r\n//     return (\r\n//         <>\r\n//             <div ref={mapElement} style={{ width: '100%', height: '100vh' }} />\r\n//             <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n//                 <div>{popupContent}</div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Style, Fill, Stroke } from 'ol/style';\r\nimport { GeoJSON } from 'ol/format';\r\nimport Overlay from 'ol/Overlay';\r\nimport Legend from './Legend';\r\nimport '../styles/MapComponent.css'; // Make sure to import the CSS file for button styles\r\n\r\nconst MapComponent: React.FC = () => {\r\n    const mapElement = useRef<HTMLDivElement | null>(null);\r\n    const popupElement = useRef<HTMLDivElement | null>(null); // Create a ref for the popup element\r\n    const [popupContent, setPopupContent] = useState<string>('');\r\n    const [popupPosition, setPopupPosition] = useState<number[]>([]);\r\n    const [showDensity, setShowDensity] = useState<boolean>(true);\r\n    const [map, setMap] = useState<Map | null>(null);\r\n    const [vectorLayer, setVectorLayer] = useState<VectorLayer<any> | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (!mapElement.current || !popupElement.current) return;\r\n\r\n        const vectorSource = new VectorSource({\r\n            url: 'https://openlayers.org/data/vector/us-states.json',\r\n            format: new GeoJSON(),\r\n        });\r\n\r\n        const newVectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            style: (feature) => {\r\n                const density = feature.get('density');\r\n                let fillColor = 'rgba(0, 0, 255, 0.1)';\r\n                if (density > 1000) fillColor = 'rgba(128, 0, 38, 0.8)';\r\n                else if (density > 750) fillColor = 'rgba(189, 0, 38, 0.8)';\r\n                else if (density > 500) fillColor = 'rgba(227, 26, 28, 0.8)';\r\n                else if (density > 250) fillColor = 'rgba(252, 78, 42, 0.8)';\r\n                else if (density > 100) fillColor = 'rgba(253, 141, 60, 0.8)';\r\n                else if (density > 50) fillColor = 'rgba(254, 178, 76, 0.8)';\r\n                else if (density > 25) fillColor = 'rgba(254, 217, 118, 0.8)';\r\n                else if (density > 0) fillColor = 'rgba(255, 237, 160, 0.8)';\r\n                return new Style({\r\n                    fill: new Fill({\r\n                        color: fillColor,\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        color: '#319FD3',\r\n                        width: 1,\r\n                    }),\r\n                });\r\n            },\r\n        });\r\n\r\n        const overlay = new Overlay({\r\n            element: popupElement.current!,\r\n            autoPan: {\r\n                animation: {\r\n                    duration: 250,\r\n                },\r\n            },\r\n        });\r\n\r\n        const newMap = new Map({\r\n            target: mapElement.current!,\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({\r\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n                    }),\r\n                }),\r\n                newVectorLayer,\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([-95.7129, 37.0902]), // Centered on the USA\r\n                zoom: 4,\r\n            }),\r\n            overlays: [overlay],\r\n        });\r\n\r\n        const handlePointerMove = (event: any) => {\r\n            newMap.getTargetElement().style.cursor = newMap.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';\r\n            const feature = newMap.getFeaturesAtPixel(event.pixel)[0];\r\n            if (feature) {\r\n                const coordinates = event.coordinate;\r\n                const name = feature.get('name');\r\n                const density = feature.get('density');\r\n                setPopupContent(`State: ${name}, Density: ${density}`);\r\n                setPopupPosition(coordinates);\r\n                overlay.setPosition(coordinates);\r\n            } else {\r\n                overlay.setPosition(undefined);\r\n            }\r\n        };\r\n\r\n        newMap.on('pointermove', handlePointerMove);\r\n\r\n        setMap(newMap);\r\n        setVectorLayer(newVectorLayer);\r\n\r\n        // Cleanup function to properly remove the map and overlay\r\n        return () => {\r\n            newMap.un('pointermove', handlePointerMove);\r\n            newMap.setTarget(undefined);\r\n            overlay.setElement(undefined);\r\n        };\r\n    }, []);\r\n\r\n    const toggleDensityLayer = () => {\r\n        if (vectorLayer) {\r\n            vectorLayer.setOpacity(showDensity ? 0 : 0.8);\r\n            setShowDensity(!showDensity);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div ref={mapElement} style={{ width: '100%', height: '100vh', padding: '10px' }} />\r\n            <div ref={popupElement} id=\"popup\" className=\"ol-popup\" style={{ position: 'absolute', backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '5px', borderRadius: '5px', border: '1px solid black', whiteSpace: 'nowrap', transform: 'translateY(10px)' }}>\r\n                <div>{popupContent}</div>\r\n            </div>\r\n            <div className=\"legend-container\">\r\n                <button className=\"toggle-button\" onClick={toggleDensityLayer}>\r\n                    {showDensity ? 'Hide' : 'Show'} Density\r\n                </button>\r\n                <Legend />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}